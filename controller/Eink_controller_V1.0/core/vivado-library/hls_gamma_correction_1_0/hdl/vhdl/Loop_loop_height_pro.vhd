-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_loop_height_pro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_rows_assign_cast_loc_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    p_rows_assign_cast_loc_empty_n : IN STD_LOGIC;
    p_rows_assign_cast_loc_read : OUT STD_LOGIC;
    p_cols_assign_cast_loc_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    p_cols_assign_cast_loc_empty_n : IN STD_LOGIC;
    p_cols_assign_cast_loc_read : OUT STD_LOGIC;
    img3_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img3_data_stream_0_V_full_n : IN STD_LOGIC;
    img3_data_stream_0_V_write : OUT STD_LOGIC;
    img3_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img3_data_stream_1_V_full_n : IN STD_LOGIC;
    img3_data_stream_1_V_write : OUT STD_LOGIC;
    img3_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img3_data_stream_2_V_full_n : IN STD_LOGIC;
    img3_data_stream_2_V_write : OUT STD_LOGIC;
    gamma_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    gamma_empty_n : IN STD_LOGIC;
    gamma_read : OUT STD_LOGIC;
    img0_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img0_data_stream_0_V_empty_n : IN STD_LOGIC;
    img0_data_stream_0_V_read : OUT STD_LOGIC;
    img0_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img0_data_stream_1_V_empty_n : IN STD_LOGIC;
    img0_data_stream_1_V_read : OUT STD_LOGIC;
    img0_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img0_data_stream_2_V_empty_n : IN STD_LOGIC;
    img0_data_stream_2_V_read : OUT STD_LOGIC );
end;


architecture behav of Loop_loop_height_pro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lut2_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_2_ce0 : STD_LOGIC;
    signal lut2_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_2_ce1 : STD_LOGIC;
    signal lut2_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_2_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_2_ce2 : STD_LOGIC;
    signal lut2_2_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_4_ce0 : STD_LOGIC;
    signal lut0_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_4_ce1 : STD_LOGIC;
    signal lut0_4_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_4_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_4_ce2 : STD_LOGIC;
    signal lut0_4_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_2_ce0 : STD_LOGIC;
    signal lut0_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_2_ce1 : STD_LOGIC;
    signal lut0_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_2_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut0_2_ce2 : STD_LOGIC;
    signal lut0_2_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_2_ce0 : STD_LOGIC;
    signal lut1_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_2_ce1 : STD_LOGIC;
    signal lut1_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_2_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_2_ce2 : STD_LOGIC;
    signal lut1_2_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_4_ce0 : STD_LOGIC;
    signal lut1_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_4_ce1 : STD_LOGIC;
    signal lut1_4_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_4_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_4_ce2 : STD_LOGIC;
    signal lut1_4_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_6_ce0 : STD_LOGIC;
    signal lut1_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_6_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_6_ce1 : STD_LOGIC;
    signal lut1_6_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_6_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_6_ce2 : STD_LOGIC;
    signal lut1_6_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_8_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_8_ce0 : STD_LOGIC;
    signal lut1_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_8_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_8_ce1 : STD_LOGIC;
    signal lut1_8_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_8_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut1_8_ce2 : STD_LOGIC;
    signal lut1_8_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_0_ce0 : STD_LOGIC;
    signal lut2_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_0_ce1 : STD_LOGIC;
    signal lut2_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_0_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut2_0_ce2 : STD_LOGIC;
    signal lut2_0_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_rows_assign_cast_loc_blk_n : STD_LOGIC;
    signal p_cols_assign_cast_loc_blk_n : STD_LOGIC;
    signal img3_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_i_i_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal img3_data_stream_1_V_blk_n : STD_LOGIC;
    signal img3_data_stream_2_V_blk_n : STD_LOGIC;
    signal gamma_blk_n : STD_LOGIC;
    signal img0_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal img0_data_stream_1_V_blk_n : STD_LOGIC;
    signal img0_data_stream_2_V_blk_n : STD_LOGIC;
    signal t_V_2_reg_444 : STD_LOGIC_VECTOR (10 downto 0);
    signal gamma_read_reg_750 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_rows_assign_cast_lo_reg_762 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cols_assign_cast_lo_reg_767 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp2_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sel_tmp6_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond161_i_i_i_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_V_fu_546_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_832 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_i_i_i_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_i_i_i_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_561_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_9_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_9_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_9_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_10_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_10_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_11_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_11_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_0_2_reg_984 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal d_val_0_3_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_0_6_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_0_7_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel1_fu_600_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel1_reg_1004 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel3_fu_607_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel3_reg_1009 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_1_2_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_1_3_reg_1019 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_1_6_reg_1024 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_1_7_reg_1029 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel9_fu_614_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel9_reg_1034 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel10_fu_621_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel10_reg_1039 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_2_2_reg_1044 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_2_3_reg_1049 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_2_6_reg_1054 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_2_7_reg_1059 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel15_fu_628_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel15_reg_1064 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel17_fu_635_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel17_reg_1069 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal t_V_reg_433 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_26_i_i_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_1_i_i_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_2_i_i_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sel_tmp3_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_cast_i_i_fu_537_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_V_1_cast_i_i_fu_552_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal newSel_fu_642_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel2_fu_647_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel4_fu_652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel5_fu_658_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel6_fu_664_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel8_fu_678_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel7_fu_683_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel11_fu_688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel12_fu_694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel13_fu_700_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel14_fu_714_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel16_fu_719_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel18_fu_724_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel19_fu_730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel20_fu_736_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Loop_loop_height_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_loop_height_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_loop_height_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_loop_height_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_loop_height_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_loop_height_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_loop_height_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_loop_height_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    lut2_2_U : component Loop_loop_height_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut2_2_address0,
        ce0 => lut2_2_ce0,
        q0 => lut2_2_q0,
        address1 => lut2_2_address1,
        ce1 => lut2_2_ce1,
        q1 => lut2_2_q1,
        address2 => lut2_2_address2,
        ce2 => lut2_2_ce2,
        q2 => lut2_2_q2);

    lut0_4_U : component Loop_loop_height_cud
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut0_4_address0,
        ce0 => lut0_4_ce0,
        q0 => lut0_4_q0,
        address1 => lut0_4_address1,
        ce1 => lut0_4_ce1,
        q1 => lut0_4_q1,
        address2 => lut0_4_address2,
        ce2 => lut0_4_ce2,
        q2 => lut0_4_q2);

    lut0_2_U : component Loop_loop_height_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut0_2_address0,
        ce0 => lut0_2_ce0,
        q0 => lut0_2_q0,
        address1 => lut0_2_address1,
        ce1 => lut0_2_ce1,
        q1 => lut0_2_q1,
        address2 => lut0_2_address2,
        ce2 => lut0_2_ce2,
        q2 => lut0_2_q2);

    lut1_2_U : component Loop_loop_height_eOg
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut1_2_address0,
        ce0 => lut1_2_ce0,
        q0 => lut1_2_q0,
        address1 => lut1_2_address1,
        ce1 => lut1_2_ce1,
        q1 => lut1_2_q1,
        address2 => lut1_2_address2,
        ce2 => lut1_2_ce2,
        q2 => lut1_2_q2);

    lut1_4_U : component Loop_loop_height_fYi
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut1_4_address0,
        ce0 => lut1_4_ce0,
        q0 => lut1_4_q0,
        address1 => lut1_4_address1,
        ce1 => lut1_4_ce1,
        q1 => lut1_4_q1,
        address2 => lut1_4_address2,
        ce2 => lut1_4_ce2,
        q2 => lut1_4_q2);

    lut1_6_U : component Loop_loop_height_g8j
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut1_6_address0,
        ce0 => lut1_6_ce0,
        q0 => lut1_6_q0,
        address1 => lut1_6_address1,
        ce1 => lut1_6_ce1,
        q1 => lut1_6_q1,
        address2 => lut1_6_address2,
        ce2 => lut1_6_ce2,
        q2 => lut1_6_q2);

    lut1_8_U : component Loop_loop_height_hbi
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut1_8_address0,
        ce0 => lut1_8_ce0,
        q0 => lut1_8_q0,
        address1 => lut1_8_address1,
        ce1 => lut1_8_ce1,
        q1 => lut1_8_q1,
        address2 => lut1_8_address2,
        ce2 => lut1_8_ce2,
        q2 => lut1_8_q2);

    lut2_0_U : component Loop_loop_height_ibs
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut2_0_address0,
        ce0 => lut2_0_ce0,
        q0 => lut2_0_q0,
        address1 => lut2_0_address1,
        ce1 => lut2_0_ce1,
        q1 => lut2_0_q1,
        address2 => lut2_0_address2,
        ce2 => lut2_0_ce2,
        q2 => lut2_0_q2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond161_i_i_i_fu_541_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond161_i_i_i_fu_541_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond161_i_i_i_fu_541_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_2_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_fu_556_p2 = ap_const_lv1_0))) then 
                t_V_2_reg_444 <= j_V_fu_561_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond161_i_i_i_fu_541_p2 = ap_const_lv1_0))) then 
                t_V_2_reg_444 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                t_V_reg_433 <= i_V_reg_832;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                t_V_reg_433 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_i_i_i_reg_837 <= exitcond_i_i_i_reg_837;
                exitcond_i_i_i_reg_837 <= exitcond_i_i_i_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 <= ap_reg_pp0_iter1_exitcond_i_i_i_reg_837;
                ap_reg_pp0_iter2_tmp_10_reg_852 <= tmp_10_reg_852;
                ap_reg_pp0_iter2_tmp_11_reg_858 <= tmp_11_reg_858;
                ap_reg_pp0_iter2_tmp_9_reg_846 <= tmp_9_reg_846;
                ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 <= ap_reg_pp0_iter2_exitcond_i_i_i_reg_837;
                ap_reg_pp0_iter3_tmp_10_reg_852 <= ap_reg_pp0_iter2_tmp_10_reg_852;
                ap_reg_pp0_iter3_tmp_11_reg_858 <= ap_reg_pp0_iter2_tmp_11_reg_858;
                ap_reg_pp0_iter3_tmp_9_reg_846 <= ap_reg_pp0_iter2_tmp_9_reg_846;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond6_reg_821 = ap_const_lv1_1) and (or_cond4_reg_814 = ap_const_lv1_1) and (or_cond_reg_800 = ap_const_lv1_1) and (sel_tmp5_reg_793 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 = ap_const_lv1_0))) then
                d_val_0_2_reg_984 <= lut0_4_q0;
                d_val_1_2_reg_1014 <= lut0_4_q1;
                d_val_2_2_reg_1044 <= lut0_4_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond6_reg_821 = ap_const_lv1_1) and (or_cond4_reg_814 = ap_const_lv1_1) and (or_cond_reg_800 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (sel_tmp5_reg_793 = ap_const_lv1_0))) then
                d_val_0_3_reg_989 <= lut0_2_q0;
                d_val_1_3_reg_1019 <= lut0_2_q1;
                d_val_2_3_reg_1049 <= lut0_2_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond6_reg_821 = ap_const_lv1_1) and (or_cond2_reg_807 = ap_const_lv1_1) and (sel_tmp6_reg_779 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (or_cond4_reg_814 = ap_const_lv1_0))) then
                d_val_0_6_reg_994 <= lut1_6_q0;
                d_val_1_6_reg_1024 <= lut1_6_q1;
                d_val_2_6_reg_1054 <= lut1_6_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond6_reg_821 = ap_const_lv1_1) and (or_cond2_reg_807 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (or_cond4_reg_814 = ap_const_lv1_0) and (sel_tmp6_reg_779 = ap_const_lv1_0))) then
                d_val_0_7_reg_999 <= lut1_8_q0;
                d_val_1_7_reg_1029 <= lut1_8_q1;
                d_val_2_7_reg_1059 <= lut1_8_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gamma_empty_n = ap_const_logic_0) or (p_cols_assign_cast_loc_empty_n = ap_const_logic_0) or (p_rows_assign_cast_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gamma_read_reg_750 <= gamma_dout;
                p_cols_assign_cast_lo_reg_767 <= p_cols_assign_cast_loc_dout;
                p_rows_assign_cast_lo_reg_762 <= p_rows_assign_cast_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_V_reg_832 <= i_V_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond6_reg_821 = ap_const_lv1_1) and (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (or_cond4_reg_814 = ap_const_lv1_0) and (or_cond2_reg_807 = ap_const_lv1_0))) then
                newSel10_reg_1039 <= newSel10_fu_621_p3;
                newSel17_reg_1069 <= newSel17_fu_635_p3;
                newSel3_reg_1009 <= newSel3_fu_607_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond6_reg_821 = ap_const_lv1_1) and (or_cond4_reg_814 = ap_const_lv1_1) and (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (or_cond_reg_800 = ap_const_lv1_0))) then
                newSel15_reg_1064 <= newSel15_fu_628_p3;
                newSel1_reg_1004 <= newSel1_fu_600_p3;
                newSel9_reg_1034 <= newSel9_fu_614_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                or_cond2_reg_807 <= or_cond2_fu_507_p2;
                or_cond4_reg_814 <= or_cond4_fu_519_p2;
                or_cond6_reg_821 <= or_cond6_fu_531_p2;
                or_cond_reg_800 <= or_cond_fu_495_p2;
                sel_tmp1_reg_786 <= sel_tmp1_fu_480_p2;
                sel_tmp2_reg_772 <= sel_tmp2_fu_460_p2;
                sel_tmp5_reg_793 <= sel_tmp5_fu_490_p2;
                sel_tmp6_reg_779 <= sel_tmp6_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0))) then
                tmp_10_reg_852 <= img0_data_stream_1_V_dout;
                tmp_11_reg_858 <= img0_data_stream_2_V_dout;
                tmp_9_reg_846 <= img0_data_stream_0_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_rows_assign_cast_loc_empty_n, p_cols_assign_cast_loc_empty_n, gamma_empty_n, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, exitcond161_i_i_i_fu_541_p2, ap_CS_fsm_state3, exitcond_i_i_i_fu_556_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((gamma_empty_n = ap_const_logic_0) or (p_cols_assign_cast_loc_empty_n = ap_const_logic_0) or (p_rows_assign_cast_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((exitcond161_i_i_i_fu_541_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_i_fu_556_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_i_fu_556_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img3_data_stream_0_V_full_n, img3_data_stream_1_V_full_n, img3_data_stream_2_V_full_n, img0_data_stream_0_V_empty_n, img0_data_stream_1_V_empty_n, img0_data_stream_2_V_empty_n, ap_enable_reg_pp0_iter4, exitcond_i_i_i_reg_837, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((img0_data_stream_2_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img0_data_stream_1_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img0_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((img3_data_stream_2_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img3_data_stream_1_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img3_data_stream_0_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img3_data_stream_0_V_full_n, img3_data_stream_1_V_full_n, img3_data_stream_2_V_full_n, img0_data_stream_0_V_empty_n, img0_data_stream_1_V_empty_n, img0_data_stream_2_V_empty_n, ap_enable_reg_pp0_iter4, exitcond_i_i_i_reg_837, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((img0_data_stream_2_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img0_data_stream_1_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img0_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((img3_data_stream_2_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img3_data_stream_1_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img3_data_stream_0_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img3_data_stream_0_V_full_n, img3_data_stream_1_V_full_n, img3_data_stream_2_V_full_n, img0_data_stream_0_V_empty_n, img0_data_stream_1_V_empty_n, img0_data_stream_2_V_empty_n, ap_enable_reg_pp0_iter4, exitcond_i_i_i_reg_837, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((img0_data_stream_2_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img0_data_stream_1_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img0_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((img3_data_stream_2_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img3_data_stream_1_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img3_data_stream_0_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_rows_assign_cast_loc_empty_n, p_cols_assign_cast_loc_empty_n, gamma_empty_n)
    begin
                ap_block_state1 <= ((gamma_empty_n = ap_const_logic_0) or (p_cols_assign_cast_loc_empty_n = ap_const_logic_0) or (p_rows_assign_cast_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(img0_data_stream_0_V_empty_n, img0_data_stream_1_V_empty_n, img0_data_stream_2_V_empty_n, exitcond_i_i_i_reg_837)
    begin
                ap_block_state5_pp0_stage0_iter1 <= (((img0_data_stream_2_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img0_data_stream_1_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img0_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0)));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter4_assign_proc : process(img3_data_stream_0_V_full_n, img3_data_stream_1_V_full_n, img3_data_stream_2_V_full_n, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837)
    begin
                ap_block_state8_pp0_stage0_iter4 <= (((img3_data_stream_2_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img3_data_stream_1_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)) or ((img3_data_stream_0_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_i_i_i_fu_556_p2)
    begin
        if ((exitcond_i_i_i_fu_556_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond161_i_i_i_fu_541_p2, ap_CS_fsm_state3)
    begin
        if (((exitcond161_i_i_i_fu_541_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond161_i_i_i_fu_541_p2, ap_CS_fsm_state3)
    begin
        if (((exitcond161_i_i_i_fu_541_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond161_i_i_i_fu_541_p2 <= "1" when (t_V_cast_i_i_fu_537_p1 = p_rows_assign_cast_lo_reg_762) else "0";
    exitcond_i_i_i_fu_556_p2 <= "1" when (t_V_1_cast_i_i_fu_552_p1 = p_cols_assign_cast_lo_reg_767) else "0";

    gamma_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, gamma_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gamma_blk_n <= gamma_empty_n;
        else 
            gamma_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gamma_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_rows_assign_cast_loc_empty_n, p_cols_assign_cast_loc_empty_n, gamma_empty_n)
    begin
        if ((not(((gamma_empty_n = ap_const_logic_0) or (p_cols_assign_cast_loc_empty_n = ap_const_logic_0) or (p_rows_assign_cast_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gamma_read <= ap_const_logic_1;
        else 
            gamma_read <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_546_p2 <= std_logic_vector(unsigned(t_V_reg_433) + unsigned(ap_const_lv11_1));

    img0_data_stream_0_V_blk_n_assign_proc : process(img0_data_stream_0_V_empty_n, ap_block_pp0_stage0, exitcond_i_i_i_reg_837, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img0_data_stream_0_V_blk_n <= img0_data_stream_0_V_empty_n;
        else 
            img0_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img0_data_stream_0_V_read_assign_proc : process(exitcond_i_i_i_reg_837, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0))) then 
            img0_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img0_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img0_data_stream_1_V_blk_n_assign_proc : process(img0_data_stream_1_V_empty_n, ap_block_pp0_stage0, exitcond_i_i_i_reg_837, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img0_data_stream_1_V_blk_n <= img0_data_stream_1_V_empty_n;
        else 
            img0_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img0_data_stream_1_V_read_assign_proc : process(exitcond_i_i_i_reg_837, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0))) then 
            img0_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img0_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img0_data_stream_2_V_blk_n_assign_proc : process(img0_data_stream_2_V_empty_n, ap_block_pp0_stage0, exitcond_i_i_i_reg_837, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img0_data_stream_2_V_blk_n <= img0_data_stream_2_V_empty_n;
        else 
            img0_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img0_data_stream_2_V_read_assign_proc : process(exitcond_i_i_i_reg_837, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_837 = ap_const_lv1_0))) then 
            img0_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img0_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img3_data_stream_0_V_blk_n_assign_proc : process(img3_data_stream_0_V_full_n, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img3_data_stream_0_V_blk_n <= img3_data_stream_0_V_full_n;
        else 
            img3_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img3_data_stream_0_V_din <= 
        newSel6_fu_664_p3 when (or_cond6_reg_821(0) = '1') else 
        ap_reg_pp0_iter3_tmp_9_reg_846;

    img3_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0))) then 
            img3_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img3_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img3_data_stream_1_V_blk_n_assign_proc : process(img3_data_stream_1_V_full_n, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img3_data_stream_1_V_blk_n <= img3_data_stream_1_V_full_n;
        else 
            img3_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img3_data_stream_1_V_din <= 
        newSel13_fu_700_p3 when (or_cond6_reg_821(0) = '1') else 
        ap_reg_pp0_iter3_tmp_10_reg_852;

    img3_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0))) then 
            img3_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img3_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img3_data_stream_2_V_blk_n_assign_proc : process(img3_data_stream_2_V_full_n, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img3_data_stream_2_V_blk_n <= img3_data_stream_2_V_full_n;
        else 
            img3_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img3_data_stream_2_V_din <= 
        newSel20_fu_736_p3 when (or_cond6_reg_821(0) = '1') else 
        ap_reg_pp0_iter3_tmp_11_reg_858;

    img3_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_i_i_i_reg_837, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 = ap_const_lv1_0))) then 
            img3_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img3_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_561_p2 <= std_logic_vector(unsigned(t_V_2_reg_444) + unsigned(ap_const_lv11_1));
    lut0_2_address0 <= tmp_26_i_i_fu_567_p1(8 - 1 downto 0);
    lut0_2_address1 <= tmp_26_1_i_i_fu_578_p1(8 - 1 downto 0);
    lut0_2_address2 <= tmp_26_2_i_i_fu_589_p1(8 - 1 downto 0);

    lut0_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut0_2_ce0 <= ap_const_logic_1;
        else 
            lut0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut0_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut0_2_ce1 <= ap_const_logic_1;
        else 
            lut0_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut0_2_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut0_2_ce2 <= ap_const_logic_1;
        else 
            lut0_2_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    lut0_4_address0 <= tmp_26_i_i_fu_567_p1(8 - 1 downto 0);
    lut0_4_address1 <= tmp_26_1_i_i_fu_578_p1(8 - 1 downto 0);
    lut0_4_address2 <= tmp_26_2_i_i_fu_589_p1(8 - 1 downto 0);

    lut0_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut0_4_ce0 <= ap_const_logic_1;
        else 
            lut0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut0_4_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut0_4_ce1 <= ap_const_logic_1;
        else 
            lut0_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut0_4_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut0_4_ce2 <= ap_const_logic_1;
        else 
            lut0_4_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    lut1_2_address0 <= tmp_26_i_i_fu_567_p1(8 - 1 downto 0);
    lut1_2_address1 <= tmp_26_1_i_i_fu_578_p1(8 - 1 downto 0);
    lut1_2_address2 <= tmp_26_2_i_i_fu_589_p1(8 - 1 downto 0);

    lut1_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_2_ce0 <= ap_const_logic_1;
        else 
            lut1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut1_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_2_ce1 <= ap_const_logic_1;
        else 
            lut1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut1_2_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_2_ce2 <= ap_const_logic_1;
        else 
            lut1_2_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    lut1_4_address0 <= tmp_26_i_i_fu_567_p1(8 - 1 downto 0);
    lut1_4_address1 <= tmp_26_1_i_i_fu_578_p1(8 - 1 downto 0);
    lut1_4_address2 <= tmp_26_2_i_i_fu_589_p1(8 - 1 downto 0);

    lut1_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_4_ce0 <= ap_const_logic_1;
        else 
            lut1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut1_4_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_4_ce1 <= ap_const_logic_1;
        else 
            lut1_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut1_4_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_4_ce2 <= ap_const_logic_1;
        else 
            lut1_4_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    lut1_6_address0 <= tmp_26_i_i_fu_567_p1(8 - 1 downto 0);
    lut1_6_address1 <= tmp_26_1_i_i_fu_578_p1(8 - 1 downto 0);
    lut1_6_address2 <= tmp_26_2_i_i_fu_589_p1(8 - 1 downto 0);

    lut1_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_6_ce0 <= ap_const_logic_1;
        else 
            lut1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut1_6_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_6_ce1 <= ap_const_logic_1;
        else 
            lut1_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut1_6_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_6_ce2 <= ap_const_logic_1;
        else 
            lut1_6_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    lut1_8_address0 <= tmp_26_i_i_fu_567_p1(8 - 1 downto 0);
    lut1_8_address1 <= tmp_26_1_i_i_fu_578_p1(8 - 1 downto 0);
    lut1_8_address2 <= tmp_26_2_i_i_fu_589_p1(8 - 1 downto 0);

    lut1_8_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_8_ce0 <= ap_const_logic_1;
        else 
            lut1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut1_8_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_8_ce1 <= ap_const_logic_1;
        else 
            lut1_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut1_8_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut1_8_ce2 <= ap_const_logic_1;
        else 
            lut1_8_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    lut2_0_address0 <= tmp_26_i_i_fu_567_p1(8 - 1 downto 0);
    lut2_0_address1 <= tmp_26_1_i_i_fu_578_p1(8 - 1 downto 0);
    lut2_0_address2 <= tmp_26_2_i_i_fu_589_p1(8 - 1 downto 0);

    lut2_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut2_0_ce0 <= ap_const_logic_1;
        else 
            lut2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut2_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut2_0_ce1 <= ap_const_logic_1;
        else 
            lut2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut2_0_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut2_0_ce2 <= ap_const_logic_1;
        else 
            lut2_0_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    lut2_2_address0 <= tmp_26_i_i_fu_567_p1(8 - 1 downto 0);
    lut2_2_address1 <= tmp_26_1_i_i_fu_578_p1(8 - 1 downto 0);
    lut2_2_address2 <= tmp_26_2_i_i_fu_589_p1(8 - 1 downto 0);

    lut2_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut2_2_ce0 <= ap_const_logic_1;
        else 
            lut2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut2_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut2_2_ce1 <= ap_const_logic_1;
        else 
            lut2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut2_2_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut2_2_ce2 <= ap_const_logic_1;
        else 
            lut2_2_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    newSel10_fu_621_p3 <= 
        lut2_0_q1 when (sel_tmp2_reg_772(0) = '1') else 
        lut2_2_q1;
    newSel11_fu_688_p3 <= 
        newSel8_fu_678_p3 when (or_cond_reg_800(0) = '1') else 
        newSel9_reg_1034;
    newSel12_fu_694_p3 <= 
        newSel7_fu_683_p3 when (or_cond2_reg_807(0) = '1') else 
        newSel10_reg_1039;
    newSel13_fu_700_p3 <= 
        newSel11_fu_688_p3 when (or_cond4_reg_814(0) = '1') else 
        newSel12_fu_694_p3;
    newSel14_fu_714_p3 <= 
        d_val_2_2_reg_1044 when (sel_tmp5_reg_793(0) = '1') else 
        d_val_2_3_reg_1049;
    newSel15_fu_628_p3 <= 
        lut1_2_q2 when (sel_tmp1_reg_786(0) = '1') else 
        lut1_4_q2;
    newSel16_fu_719_p3 <= 
        d_val_2_6_reg_1054 when (sel_tmp6_reg_779(0) = '1') else 
        d_val_2_7_reg_1059;
    newSel17_fu_635_p3 <= 
        lut2_0_q2 when (sel_tmp2_reg_772(0) = '1') else 
        lut2_2_q2;
    newSel18_fu_724_p3 <= 
        newSel14_fu_714_p3 when (or_cond_reg_800(0) = '1') else 
        newSel15_reg_1064;
    newSel19_fu_730_p3 <= 
        newSel16_fu_719_p3 when (or_cond2_reg_807(0) = '1') else 
        newSel17_reg_1069;
    newSel1_fu_600_p3 <= 
        lut1_2_q0 when (sel_tmp1_reg_786(0) = '1') else 
        lut1_4_q0;
    newSel20_fu_736_p3 <= 
        newSel18_fu_724_p3 when (or_cond4_reg_814(0) = '1') else 
        newSel19_fu_730_p3;
    newSel2_fu_647_p3 <= 
        d_val_0_6_reg_994 when (sel_tmp6_reg_779(0) = '1') else 
        d_val_0_7_reg_999;
    newSel3_fu_607_p3 <= 
        lut2_0_q0 when (sel_tmp2_reg_772(0) = '1') else 
        lut2_2_q0;
    newSel4_fu_652_p3 <= 
        newSel_fu_642_p3 when (or_cond_reg_800(0) = '1') else 
        newSel1_reg_1004;
    newSel5_fu_658_p3 <= 
        newSel2_fu_647_p3 when (or_cond2_reg_807(0) = '1') else 
        newSel3_reg_1009;
    newSel6_fu_664_p3 <= 
        newSel4_fu_652_p3 when (or_cond4_reg_814(0) = '1') else 
        newSel5_fu_658_p3;
    newSel7_fu_683_p3 <= 
        d_val_1_6_reg_1024 when (sel_tmp6_reg_779(0) = '1') else 
        d_val_1_7_reg_1029;
    newSel8_fu_678_p3 <= 
        d_val_1_2_reg_1014 when (sel_tmp5_reg_793(0) = '1') else 
        d_val_1_3_reg_1019;
    newSel9_fu_614_p3 <= 
        lut1_2_q1 when (sel_tmp1_reg_786(0) = '1') else 
        lut1_4_q1;
    newSel_fu_642_p3 <= 
        d_val_0_2_reg_984 when (sel_tmp5_reg_793(0) = '1') else 
        d_val_0_3_reg_989;
    or_cond1_fu_501_p2 <= (sel_tmp8_fu_475_p2 or sel_tmp1_fu_480_p2);
    or_cond2_fu_507_p2 <= (sel_tmp6_fu_470_p2 or sel_tmp4_fu_465_p2);
    or_cond3_fu_513_p2 <= (sel_tmp_fu_455_p2 or sel_tmp2_fu_460_p2);
    or_cond4_fu_519_p2 <= (or_cond_fu_495_p2 or or_cond1_fu_501_p2);
    or_cond5_fu_525_p2 <= (or_cond3_fu_513_p2 or or_cond2_fu_507_p2);
    or_cond6_fu_531_p2 <= (or_cond5_fu_525_p2 or or_cond4_fu_519_p2);
    or_cond_fu_495_p2 <= (sel_tmp5_fu_490_p2 or sel_tmp3_fu_485_p2);

    p_cols_assign_cast_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_cols_assign_cast_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_cols_assign_cast_loc_blk_n <= p_cols_assign_cast_loc_empty_n;
        else 
            p_cols_assign_cast_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_cols_assign_cast_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_rows_assign_cast_loc_empty_n, p_cols_assign_cast_loc_empty_n, gamma_empty_n)
    begin
        if ((not(((gamma_empty_n = ap_const_logic_0) or (p_cols_assign_cast_loc_empty_n = ap_const_logic_0) or (p_rows_assign_cast_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_cols_assign_cast_loc_read <= ap_const_logic_1;
        else 
            p_cols_assign_cast_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    p_rows_assign_cast_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_rows_assign_cast_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_rows_assign_cast_loc_blk_n <= p_rows_assign_cast_loc_empty_n;
        else 
            p_rows_assign_cast_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_rows_assign_cast_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_rows_assign_cast_loc_empty_n, p_cols_assign_cast_loc_empty_n, gamma_empty_n)
    begin
        if ((not(((gamma_empty_n = ap_const_logic_0) or (p_cols_assign_cast_loc_empty_n = ap_const_logic_0) or (p_rows_assign_cast_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_rows_assign_cast_loc_read <= ap_const_logic_1;
        else 
            p_rows_assign_cast_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_480_p2 <= "1" when (gamma_read_reg_750 = ap_const_lv8_3) else "0";
    sel_tmp2_fu_460_p2 <= "1" when (gamma_read_reg_750 = ap_const_lv8_7) else "0";
    sel_tmp3_fu_485_p2 <= "1" when (gamma_read_reg_750 = ap_const_lv8_2) else "0";
    sel_tmp4_fu_465_p2 <= "1" when (gamma_read_reg_750 = ap_const_lv8_6) else "0";
    sel_tmp5_fu_490_p2 <= "1" when (gamma_read_reg_750 = ap_const_lv8_1) else "0";
    sel_tmp6_fu_470_p2 <= "1" when (gamma_read_reg_750 = ap_const_lv8_5) else "0";
    sel_tmp8_fu_475_p2 <= "1" when (gamma_read_reg_750 = ap_const_lv8_4) else "0";
    sel_tmp_fu_455_p2 <= "1" when (gamma_read_reg_750 = ap_const_lv8_8) else "0";
    t_V_1_cast_i_i_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_444),12));
    t_V_cast_i_i_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_433),12));
    tmp_26_1_i_i_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_852),64));
    tmp_26_2_i_i_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_858),64));
    tmp_26_i_i_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_846),64));
end behav;
