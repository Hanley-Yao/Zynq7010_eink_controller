// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_loop_height_pro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_rows_assign_cast_loc_dout,
        p_rows_assign_cast_loc_empty_n,
        p_rows_assign_cast_loc_read,
        p_cols_assign_cast_loc_dout,
        p_cols_assign_cast_loc_empty_n,
        p_cols_assign_cast_loc_read,
        img3_data_stream_0_V_din,
        img3_data_stream_0_V_full_n,
        img3_data_stream_0_V_write,
        img3_data_stream_1_V_din,
        img3_data_stream_1_V_full_n,
        img3_data_stream_1_V_write,
        img3_data_stream_2_V_din,
        img3_data_stream_2_V_full_n,
        img3_data_stream_2_V_write,
        gamma_dout,
        gamma_empty_n,
        gamma_read,
        img0_data_stream_0_V_dout,
        img0_data_stream_0_V_empty_n,
        img0_data_stream_0_V_read,
        img0_data_stream_1_V_dout,
        img0_data_stream_1_V_empty_n,
        img0_data_stream_1_V_read,
        img0_data_stream_2_V_dout,
        img0_data_stream_2_V_empty_n,
        img0_data_stream_2_V_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] p_rows_assign_cast_loc_dout;
input   p_rows_assign_cast_loc_empty_n;
output   p_rows_assign_cast_loc_read;
input  [11:0] p_cols_assign_cast_loc_dout;
input   p_cols_assign_cast_loc_empty_n;
output   p_cols_assign_cast_loc_read;
output  [7:0] img3_data_stream_0_V_din;
input   img3_data_stream_0_V_full_n;
output   img3_data_stream_0_V_write;
output  [7:0] img3_data_stream_1_V_din;
input   img3_data_stream_1_V_full_n;
output   img3_data_stream_1_V_write;
output  [7:0] img3_data_stream_2_V_din;
input   img3_data_stream_2_V_full_n;
output   img3_data_stream_2_V_write;
input  [7:0] gamma_dout;
input   gamma_empty_n;
output   gamma_read;
input  [7:0] img0_data_stream_0_V_dout;
input   img0_data_stream_0_V_empty_n;
output   img0_data_stream_0_V_read;
input  [7:0] img0_data_stream_1_V_dout;
input   img0_data_stream_1_V_empty_n;
output   img0_data_stream_1_V_read;
input  [7:0] img0_data_stream_2_V_dout;
input   img0_data_stream_2_V_empty_n;
output   img0_data_stream_2_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_rows_assign_cast_loc_read;
reg p_cols_assign_cast_loc_read;
reg img3_data_stream_0_V_write;
reg img3_data_stream_1_V_write;
reg img3_data_stream_2_V_write;
reg gamma_read;
reg img0_data_stream_0_V_read;
reg img0_data_stream_1_V_read;
reg img0_data_stream_2_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] lut2_2_address0;
reg    lut2_2_ce0;
wire   [7:0] lut2_2_q0;
wire   [7:0] lut2_2_address1;
reg    lut2_2_ce1;
wire   [7:0] lut2_2_q1;
wire   [7:0] lut2_2_address2;
reg    lut2_2_ce2;
wire   [7:0] lut2_2_q2;
wire   [7:0] lut0_4_address0;
reg    lut0_4_ce0;
wire   [7:0] lut0_4_q0;
wire   [7:0] lut0_4_address1;
reg    lut0_4_ce1;
wire   [7:0] lut0_4_q1;
wire   [7:0] lut0_4_address2;
reg    lut0_4_ce2;
wire   [7:0] lut0_4_q2;
wire   [7:0] lut0_2_address0;
reg    lut0_2_ce0;
wire   [7:0] lut0_2_q0;
wire   [7:0] lut0_2_address1;
reg    lut0_2_ce1;
wire   [7:0] lut0_2_q1;
wire   [7:0] lut0_2_address2;
reg    lut0_2_ce2;
wire   [7:0] lut0_2_q2;
wire   [7:0] lut1_2_address0;
reg    lut1_2_ce0;
wire   [7:0] lut1_2_q0;
wire   [7:0] lut1_2_address1;
reg    lut1_2_ce1;
wire   [7:0] lut1_2_q1;
wire   [7:0] lut1_2_address2;
reg    lut1_2_ce2;
wire   [7:0] lut1_2_q2;
wire   [7:0] lut1_4_address0;
reg    lut1_4_ce0;
wire   [7:0] lut1_4_q0;
wire   [7:0] lut1_4_address1;
reg    lut1_4_ce1;
wire   [7:0] lut1_4_q1;
wire   [7:0] lut1_4_address2;
reg    lut1_4_ce2;
wire   [7:0] lut1_4_q2;
wire   [7:0] lut1_6_address0;
reg    lut1_6_ce0;
wire   [7:0] lut1_6_q0;
wire   [7:0] lut1_6_address1;
reg    lut1_6_ce1;
wire   [7:0] lut1_6_q1;
wire   [7:0] lut1_6_address2;
reg    lut1_6_ce2;
wire   [7:0] lut1_6_q2;
wire   [7:0] lut1_8_address0;
reg    lut1_8_ce0;
wire   [7:0] lut1_8_q0;
wire   [7:0] lut1_8_address1;
reg    lut1_8_ce1;
wire   [7:0] lut1_8_q1;
wire   [7:0] lut1_8_address2;
reg    lut1_8_ce2;
wire   [7:0] lut1_8_q2;
wire   [7:0] lut2_0_address0;
reg    lut2_0_ce0;
wire   [7:0] lut2_0_q0;
wire   [7:0] lut2_0_address1;
reg    lut2_0_ce1;
wire   [7:0] lut2_0_q1;
wire   [7:0] lut2_0_address2;
reg    lut2_0_ce2;
wire   [7:0] lut2_0_q2;
reg    p_rows_assign_cast_loc_blk_n;
reg    p_cols_assign_cast_loc_blk_n;
reg    img3_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_i_reg_837;
reg   [0:0] ap_reg_pp0_iter3_exitcond_i_i_i_reg_837;
reg    img3_data_stream_1_V_blk_n;
reg    img3_data_stream_2_V_blk_n;
reg    gamma_blk_n;
reg    img0_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    img0_data_stream_1_V_blk_n;
reg    img0_data_stream_2_V_blk_n;
reg   [10:0] t_V_2_reg_444;
reg   [7:0] gamma_read_reg_750;
reg    ap_block_state1;
reg   [11:0] p_rows_assign_cast_lo_reg_762;
reg   [11:0] p_cols_assign_cast_lo_reg_767;
wire   [0:0] sel_tmp2_fu_460_p2;
reg   [0:0] sel_tmp2_reg_772;
wire    ap_CS_fsm_state2;
wire   [0:0] sel_tmp6_fu_470_p2;
reg   [0:0] sel_tmp6_reg_779;
wire   [0:0] sel_tmp1_fu_480_p2;
reg   [0:0] sel_tmp1_reg_786;
wire   [0:0] sel_tmp5_fu_490_p2;
reg   [0:0] sel_tmp5_reg_793;
wire   [0:0] or_cond_fu_495_p2;
reg   [0:0] or_cond_reg_800;
wire   [0:0] or_cond2_fu_507_p2;
reg   [0:0] or_cond2_reg_807;
wire   [0:0] or_cond4_fu_519_p2;
reg   [0:0] or_cond4_reg_814;
wire   [0:0] or_cond6_fu_531_p2;
reg   [0:0] or_cond6_reg_821;
wire   [0:0] exitcond161_i_i_i_fu_541_p2;
wire    ap_CS_fsm_state3;
wire   [10:0] i_V_fu_546_p2;
reg   [10:0] i_V_reg_832;
wire   [0:0] exitcond_i_i_i_fu_556_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state8_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_i_reg_837;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_i_i_reg_837;
wire   [10:0] j_V_fu_561_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_9_reg_846;
reg   [7:0] ap_reg_pp0_iter2_tmp_9_reg_846;
reg   [7:0] ap_reg_pp0_iter3_tmp_9_reg_846;
reg   [7:0] tmp_10_reg_852;
reg   [7:0] ap_reg_pp0_iter2_tmp_10_reg_852;
reg   [7:0] ap_reg_pp0_iter3_tmp_10_reg_852;
reg   [7:0] tmp_11_reg_858;
reg   [7:0] ap_reg_pp0_iter2_tmp_11_reg_858;
reg   [7:0] ap_reg_pp0_iter3_tmp_11_reg_858;
reg   [7:0] d_val_0_2_reg_984;
reg    ap_enable_reg_pp0_iter3;
reg   [7:0] d_val_0_3_reg_989;
reg   [7:0] d_val_0_6_reg_994;
reg   [7:0] d_val_0_7_reg_999;
wire   [7:0] newSel1_fu_600_p3;
reg   [7:0] newSel1_reg_1004;
wire   [7:0] newSel3_fu_607_p3;
reg   [7:0] newSel3_reg_1009;
reg   [7:0] d_val_1_2_reg_1014;
reg   [7:0] d_val_1_3_reg_1019;
reg   [7:0] d_val_1_6_reg_1024;
reg   [7:0] d_val_1_7_reg_1029;
wire   [7:0] newSel9_fu_614_p3;
reg   [7:0] newSel9_reg_1034;
wire   [7:0] newSel10_fu_621_p3;
reg   [7:0] newSel10_reg_1039;
reg   [7:0] d_val_2_2_reg_1044;
reg   [7:0] d_val_2_3_reg_1049;
reg   [7:0] d_val_2_6_reg_1054;
reg   [7:0] d_val_2_7_reg_1059;
wire   [7:0] newSel15_fu_628_p3;
reg   [7:0] newSel15_reg_1064;
wire   [7:0] newSel17_fu_635_p3;
reg   [7:0] newSel17_reg_1069;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter2;
reg   [10:0] t_V_reg_433;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_26_i_i_fu_567_p1;
wire   [63:0] tmp_26_1_i_i_fu_578_p1;
wire   [63:0] tmp_26_2_i_i_fu_589_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] sel_tmp3_fu_485_p2;
wire   [0:0] sel_tmp8_fu_475_p2;
wire   [0:0] sel_tmp4_fu_465_p2;
wire   [0:0] sel_tmp_fu_455_p2;
wire   [0:0] or_cond1_fu_501_p2;
wire   [0:0] or_cond3_fu_513_p2;
wire   [0:0] or_cond5_fu_525_p2;
wire   [11:0] t_V_cast_i_i_fu_537_p1;
wire   [11:0] t_V_1_cast_i_i_fu_552_p1;
wire   [7:0] newSel_fu_642_p3;
wire   [7:0] newSel2_fu_647_p3;
wire   [7:0] newSel4_fu_652_p3;
wire   [7:0] newSel5_fu_658_p3;
wire   [7:0] newSel6_fu_664_p3;
wire   [7:0] newSel8_fu_678_p3;
wire   [7:0] newSel7_fu_683_p3;
wire   [7:0] newSel11_fu_688_p3;
wire   [7:0] newSel12_fu_694_p3;
wire   [7:0] newSel13_fu_700_p3;
wire   [7:0] newSel14_fu_714_p3;
wire   [7:0] newSel16_fu_719_p3;
wire   [7:0] newSel18_fu_724_p3;
wire   [7:0] newSel19_fu_730_p3;
wire   [7:0] newSel20_fu_736_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Loop_loop_height_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut2_2_address0),
    .ce0(lut2_2_ce0),
    .q0(lut2_2_q0),
    .address1(lut2_2_address1),
    .ce1(lut2_2_ce1),
    .q1(lut2_2_q1),
    .address2(lut2_2_address2),
    .ce2(lut2_2_ce2),
    .q2(lut2_2_q2)
);

Loop_loop_height_cud #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut0_4_address0),
    .ce0(lut0_4_ce0),
    .q0(lut0_4_q0),
    .address1(lut0_4_address1),
    .ce1(lut0_4_ce1),
    .q1(lut0_4_q1),
    .address2(lut0_4_address2),
    .ce2(lut0_4_ce2),
    .q2(lut0_4_q2)
);

Loop_loop_height_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut0_2_address0),
    .ce0(lut0_2_ce0),
    .q0(lut0_2_q0),
    .address1(lut0_2_address1),
    .ce1(lut0_2_ce1),
    .q1(lut0_2_q1),
    .address2(lut0_2_address2),
    .ce2(lut0_2_ce2),
    .q2(lut0_2_q2)
);

Loop_loop_height_eOg #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut1_2_address0),
    .ce0(lut1_2_ce0),
    .q0(lut1_2_q0),
    .address1(lut1_2_address1),
    .ce1(lut1_2_ce1),
    .q1(lut1_2_q1),
    .address2(lut1_2_address2),
    .ce2(lut1_2_ce2),
    .q2(lut1_2_q2)
);

Loop_loop_height_fYi #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut1_4_address0),
    .ce0(lut1_4_ce0),
    .q0(lut1_4_q0),
    .address1(lut1_4_address1),
    .ce1(lut1_4_ce1),
    .q1(lut1_4_q1),
    .address2(lut1_4_address2),
    .ce2(lut1_4_ce2),
    .q2(lut1_4_q2)
);

Loop_loop_height_g8j #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut1_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut1_6_address0),
    .ce0(lut1_6_ce0),
    .q0(lut1_6_q0),
    .address1(lut1_6_address1),
    .ce1(lut1_6_ce1),
    .q1(lut1_6_q1),
    .address2(lut1_6_address2),
    .ce2(lut1_6_ce2),
    .q2(lut1_6_q2)
);

Loop_loop_height_hbi #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut1_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut1_8_address0),
    .ce0(lut1_8_ce0),
    .q0(lut1_8_q0),
    .address1(lut1_8_address1),
    .ce1(lut1_8_ce1),
    .q1(lut1_8_q1),
    .address2(lut1_8_address2),
    .ce2(lut1_8_ce2),
    .q2(lut1_8_q2)
);

Loop_loop_height_ibs #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut2_0_address0),
    .ce0(lut2_0_ce0),
    .q0(lut2_0_q0),
    .address1(lut2_0_address1),
    .ce1(lut2_0_ce1),
    .q1(lut2_0_q1),
    .address2(lut2_0_address2),
    .ce2(lut2_0_ce2),
    .q2(lut2_0_q2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond161_i_i_i_fu_541_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond161_i_i_i_fu_541_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond161_i_i_i_fu_541_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_fu_556_p2 == 1'd0))) begin
        t_V_2_reg_444 <= j_V_fu_561_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond161_i_i_i_fu_541_p2 == 1'd0))) begin
        t_V_2_reg_444 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_433 <= i_V_reg_832;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_reg_433 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_i_i_i_reg_837 <= exitcond_i_i_i_reg_837;
        exitcond_i_i_i_reg_837 <= exitcond_i_i_i_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 <= ap_reg_pp0_iter1_exitcond_i_i_i_reg_837;
        ap_reg_pp0_iter2_tmp_10_reg_852 <= tmp_10_reg_852;
        ap_reg_pp0_iter2_tmp_11_reg_858 <= tmp_11_reg_858;
        ap_reg_pp0_iter2_tmp_9_reg_846 <= tmp_9_reg_846;
        ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 <= ap_reg_pp0_iter2_exitcond_i_i_i_reg_837;
        ap_reg_pp0_iter3_tmp_10_reg_852 <= ap_reg_pp0_iter2_tmp_10_reg_852;
        ap_reg_pp0_iter3_tmp_11_reg_858 <= ap_reg_pp0_iter2_tmp_11_reg_858;
        ap_reg_pp0_iter3_tmp_9_reg_846 <= ap_reg_pp0_iter2_tmp_9_reg_846;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond6_reg_821 == 1'd1) & (or_cond4_reg_814 == 1'd1) & (or_cond_reg_800 == 1'd1) & (sel_tmp5_reg_793 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 == 1'd0))) begin
        d_val_0_2_reg_984 <= lut0_4_q0;
        d_val_1_2_reg_1014 <= lut0_4_q1;
        d_val_2_2_reg_1044 <= lut0_4_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond6_reg_821 == 1'd1) & (or_cond4_reg_814 == 1'd1) & (or_cond_reg_800 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 == 1'd0) & (sel_tmp5_reg_793 == 1'd0))) begin
        d_val_0_3_reg_989 <= lut0_2_q0;
        d_val_1_3_reg_1019 <= lut0_2_q1;
        d_val_2_3_reg_1049 <= lut0_2_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond6_reg_821 == 1'd1) & (or_cond2_reg_807 == 1'd1) & (sel_tmp6_reg_779 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 == 1'd0) & (or_cond4_reg_814 == 1'd0))) begin
        d_val_0_6_reg_994 <= lut1_6_q0;
        d_val_1_6_reg_1024 <= lut1_6_q1;
        d_val_2_6_reg_1054 <= lut1_6_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond6_reg_821 == 1'd1) & (or_cond2_reg_807 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 == 1'd0) & (or_cond4_reg_814 == 1'd0) & (sel_tmp6_reg_779 == 1'd0))) begin
        d_val_0_7_reg_999 <= lut1_8_q0;
        d_val_1_7_reg_1029 <= lut1_8_q1;
        d_val_2_7_reg_1059 <= lut1_8_q2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gamma_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gamma_read_reg_750 <= gamma_dout;
        p_cols_assign_cast_lo_reg_767 <= p_cols_assign_cast_loc_dout;
        p_rows_assign_cast_lo_reg_762 <= p_rows_assign_cast_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_V_reg_832 <= i_V_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond6_reg_821 == 1'd1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 == 1'd0) & (or_cond4_reg_814 == 1'd0) & (or_cond2_reg_807 == 1'd0))) begin
        newSel10_reg_1039 <= newSel10_fu_621_p3;
        newSel17_reg_1069 <= newSel17_fu_635_p3;
        newSel3_reg_1009 <= newSel3_fu_607_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond6_reg_821 == 1'd1) & (or_cond4_reg_814 == 1'd1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_837 == 1'd0) & (or_cond_reg_800 == 1'd0))) begin
        newSel15_reg_1064 <= newSel15_fu_628_p3;
        newSel1_reg_1004 <= newSel1_fu_600_p3;
        newSel9_reg_1034 <= newSel9_fu_614_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        or_cond2_reg_807 <= or_cond2_fu_507_p2;
        or_cond4_reg_814 <= or_cond4_fu_519_p2;
        or_cond6_reg_821 <= or_cond6_fu_531_p2;
        or_cond_reg_800 <= or_cond_fu_495_p2;
        sel_tmp1_reg_786 <= sel_tmp1_fu_480_p2;
        sel_tmp2_reg_772 <= sel_tmp2_fu_460_p2;
        sel_tmp5_reg_793 <= sel_tmp5_fu_490_p2;
        sel_tmp6_reg_779 <= sel_tmp6_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_837 == 1'd0))) begin
        tmp_10_reg_852 <= img0_data_stream_1_V_dout;
        tmp_11_reg_858 <= img0_data_stream_2_V_dout;
        tmp_9_reg_846 <= img0_data_stream_0_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_i_i_i_fu_556_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond161_i_i_i_fu_541_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond161_i_i_i_fu_541_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gamma_blk_n = gamma_empty_n;
    end else begin
        gamma_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((gamma_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gamma_read = 1'b1;
    end else begin
        gamma_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_837 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img0_data_stream_0_V_blk_n = img0_data_stream_0_V_empty_n;
    end else begin
        img0_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_837 == 1'd0))) begin
        img0_data_stream_0_V_read = 1'b1;
    end else begin
        img0_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_837 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img0_data_stream_1_V_blk_n = img0_data_stream_1_V_empty_n;
    end else begin
        img0_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_837 == 1'd0))) begin
        img0_data_stream_1_V_read = 1'b1;
    end else begin
        img0_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_837 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img0_data_stream_2_V_blk_n = img0_data_stream_2_V_empty_n;
    end else begin
        img0_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_837 == 1'd0))) begin
        img0_data_stream_2_V_read = 1'b1;
    end else begin
        img0_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img3_data_stream_0_V_blk_n = img3_data_stream_0_V_full_n;
    end else begin
        img3_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0))) begin
        img3_data_stream_0_V_write = 1'b1;
    end else begin
        img3_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img3_data_stream_1_V_blk_n = img3_data_stream_1_V_full_n;
    end else begin
        img3_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0))) begin
        img3_data_stream_1_V_write = 1'b1;
    end else begin
        img3_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img3_data_stream_2_V_blk_n = img3_data_stream_2_V_full_n;
    end else begin
        img3_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0))) begin
        img3_data_stream_2_V_write = 1'b1;
    end else begin
        img3_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut0_2_ce0 = 1'b1;
    end else begin
        lut0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut0_2_ce1 = 1'b1;
    end else begin
        lut0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut0_2_ce2 = 1'b1;
    end else begin
        lut0_2_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut0_4_ce0 = 1'b1;
    end else begin
        lut0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut0_4_ce1 = 1'b1;
    end else begin
        lut0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut0_4_ce2 = 1'b1;
    end else begin
        lut0_4_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_2_ce0 = 1'b1;
    end else begin
        lut1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_2_ce1 = 1'b1;
    end else begin
        lut1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_2_ce2 = 1'b1;
    end else begin
        lut1_2_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_4_ce0 = 1'b1;
    end else begin
        lut1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_4_ce1 = 1'b1;
    end else begin
        lut1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_4_ce2 = 1'b1;
    end else begin
        lut1_4_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_6_ce0 = 1'b1;
    end else begin
        lut1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_6_ce1 = 1'b1;
    end else begin
        lut1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_6_ce2 = 1'b1;
    end else begin
        lut1_6_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_8_ce0 = 1'b1;
    end else begin
        lut1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_8_ce1 = 1'b1;
    end else begin
        lut1_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut1_8_ce2 = 1'b1;
    end else begin
        lut1_8_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut2_0_ce0 = 1'b1;
    end else begin
        lut2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut2_0_ce1 = 1'b1;
    end else begin
        lut2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut2_0_ce2 = 1'b1;
    end else begin
        lut2_0_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut2_2_ce0 = 1'b1;
    end else begin
        lut2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut2_2_ce1 = 1'b1;
    end else begin
        lut2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut2_2_ce2 = 1'b1;
    end else begin
        lut2_2_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cols_assign_cast_loc_blk_n = p_cols_assign_cast_loc_empty_n;
    end else begin
        p_cols_assign_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((gamma_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cols_assign_cast_loc_read = 1'b1;
    end else begin
        p_cols_assign_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_rows_assign_cast_loc_blk_n = p_rows_assign_cast_loc_empty_n;
    end else begin
        p_rows_assign_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((gamma_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_rows_assign_cast_loc_read = 1'b1;
    end else begin
        p_rows_assign_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((gamma_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond161_i_i_i_fu_541_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_i_fu_556_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_i_fu_556_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((img0_data_stream_2_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)) | ((img0_data_stream_1_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)) | ((img0_data_stream_0_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((img3_data_stream_2_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)) | ((img3_data_stream_1_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)) | ((img3_data_stream_0_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((img0_data_stream_2_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)) | ((img0_data_stream_1_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)) | ((img0_data_stream_0_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((img3_data_stream_2_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)) | ((img3_data_stream_1_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)) | ((img3_data_stream_0_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((img0_data_stream_2_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)) | ((img0_data_stream_1_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)) | ((img0_data_stream_0_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((img3_data_stream_2_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)) | ((img3_data_stream_1_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)) | ((img3_data_stream_0_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((gamma_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((img0_data_stream_2_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)) | ((img0_data_stream_1_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)) | ((img0_data_stream_0_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_837 == 1'd0)));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter4 = (((img3_data_stream_2_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)) | ((img3_data_stream_1_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)) | ((img3_data_stream_0_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_837 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond161_i_i_i_fu_541_p2 = ((t_V_cast_i_i_fu_537_p1 == p_rows_assign_cast_lo_reg_762) ? 1'b1 : 1'b0);

assign exitcond_i_i_i_fu_556_p2 = ((t_V_1_cast_i_i_fu_552_p1 == p_cols_assign_cast_lo_reg_767) ? 1'b1 : 1'b0);

assign i_V_fu_546_p2 = (t_V_reg_433 + 11'd1);

assign img3_data_stream_0_V_din = ((or_cond6_reg_821[0:0] === 1'b1) ? newSel6_fu_664_p3 : ap_reg_pp0_iter3_tmp_9_reg_846);

assign img3_data_stream_1_V_din = ((or_cond6_reg_821[0:0] === 1'b1) ? newSel13_fu_700_p3 : ap_reg_pp0_iter3_tmp_10_reg_852);

assign img3_data_stream_2_V_din = ((or_cond6_reg_821[0:0] === 1'b1) ? newSel20_fu_736_p3 : ap_reg_pp0_iter3_tmp_11_reg_858);

assign j_V_fu_561_p2 = (t_V_2_reg_444 + 11'd1);

assign lut0_2_address0 = tmp_26_i_i_fu_567_p1;

assign lut0_2_address1 = tmp_26_1_i_i_fu_578_p1;

assign lut0_2_address2 = tmp_26_2_i_i_fu_589_p1;

assign lut0_4_address0 = tmp_26_i_i_fu_567_p1;

assign lut0_4_address1 = tmp_26_1_i_i_fu_578_p1;

assign lut0_4_address2 = tmp_26_2_i_i_fu_589_p1;

assign lut1_2_address0 = tmp_26_i_i_fu_567_p1;

assign lut1_2_address1 = tmp_26_1_i_i_fu_578_p1;

assign lut1_2_address2 = tmp_26_2_i_i_fu_589_p1;

assign lut1_4_address0 = tmp_26_i_i_fu_567_p1;

assign lut1_4_address1 = tmp_26_1_i_i_fu_578_p1;

assign lut1_4_address2 = tmp_26_2_i_i_fu_589_p1;

assign lut1_6_address0 = tmp_26_i_i_fu_567_p1;

assign lut1_6_address1 = tmp_26_1_i_i_fu_578_p1;

assign lut1_6_address2 = tmp_26_2_i_i_fu_589_p1;

assign lut1_8_address0 = tmp_26_i_i_fu_567_p1;

assign lut1_8_address1 = tmp_26_1_i_i_fu_578_p1;

assign lut1_8_address2 = tmp_26_2_i_i_fu_589_p1;

assign lut2_0_address0 = tmp_26_i_i_fu_567_p1;

assign lut2_0_address1 = tmp_26_1_i_i_fu_578_p1;

assign lut2_0_address2 = tmp_26_2_i_i_fu_589_p1;

assign lut2_2_address0 = tmp_26_i_i_fu_567_p1;

assign lut2_2_address1 = tmp_26_1_i_i_fu_578_p1;

assign lut2_2_address2 = tmp_26_2_i_i_fu_589_p1;

assign newSel10_fu_621_p3 = ((sel_tmp2_reg_772[0:0] === 1'b1) ? lut2_0_q1 : lut2_2_q1);

assign newSel11_fu_688_p3 = ((or_cond_reg_800[0:0] === 1'b1) ? newSel8_fu_678_p3 : newSel9_reg_1034);

assign newSel12_fu_694_p3 = ((or_cond2_reg_807[0:0] === 1'b1) ? newSel7_fu_683_p3 : newSel10_reg_1039);

assign newSel13_fu_700_p3 = ((or_cond4_reg_814[0:0] === 1'b1) ? newSel11_fu_688_p3 : newSel12_fu_694_p3);

assign newSel14_fu_714_p3 = ((sel_tmp5_reg_793[0:0] === 1'b1) ? d_val_2_2_reg_1044 : d_val_2_3_reg_1049);

assign newSel15_fu_628_p3 = ((sel_tmp1_reg_786[0:0] === 1'b1) ? lut1_2_q2 : lut1_4_q2);

assign newSel16_fu_719_p3 = ((sel_tmp6_reg_779[0:0] === 1'b1) ? d_val_2_6_reg_1054 : d_val_2_7_reg_1059);

assign newSel17_fu_635_p3 = ((sel_tmp2_reg_772[0:0] === 1'b1) ? lut2_0_q2 : lut2_2_q2);

assign newSel18_fu_724_p3 = ((or_cond_reg_800[0:0] === 1'b1) ? newSel14_fu_714_p3 : newSel15_reg_1064);

assign newSel19_fu_730_p3 = ((or_cond2_reg_807[0:0] === 1'b1) ? newSel16_fu_719_p3 : newSel17_reg_1069);

assign newSel1_fu_600_p3 = ((sel_tmp1_reg_786[0:0] === 1'b1) ? lut1_2_q0 : lut1_4_q0);

assign newSel20_fu_736_p3 = ((or_cond4_reg_814[0:0] === 1'b1) ? newSel18_fu_724_p3 : newSel19_fu_730_p3);

assign newSel2_fu_647_p3 = ((sel_tmp6_reg_779[0:0] === 1'b1) ? d_val_0_6_reg_994 : d_val_0_7_reg_999);

assign newSel3_fu_607_p3 = ((sel_tmp2_reg_772[0:0] === 1'b1) ? lut2_0_q0 : lut2_2_q0);

assign newSel4_fu_652_p3 = ((or_cond_reg_800[0:0] === 1'b1) ? newSel_fu_642_p3 : newSel1_reg_1004);

assign newSel5_fu_658_p3 = ((or_cond2_reg_807[0:0] === 1'b1) ? newSel2_fu_647_p3 : newSel3_reg_1009);

assign newSel6_fu_664_p3 = ((or_cond4_reg_814[0:0] === 1'b1) ? newSel4_fu_652_p3 : newSel5_fu_658_p3);

assign newSel7_fu_683_p3 = ((sel_tmp6_reg_779[0:0] === 1'b1) ? d_val_1_6_reg_1024 : d_val_1_7_reg_1029);

assign newSel8_fu_678_p3 = ((sel_tmp5_reg_793[0:0] === 1'b1) ? d_val_1_2_reg_1014 : d_val_1_3_reg_1019);

assign newSel9_fu_614_p3 = ((sel_tmp1_reg_786[0:0] === 1'b1) ? lut1_2_q1 : lut1_4_q1);

assign newSel_fu_642_p3 = ((sel_tmp5_reg_793[0:0] === 1'b1) ? d_val_0_2_reg_984 : d_val_0_3_reg_989);

assign or_cond1_fu_501_p2 = (sel_tmp8_fu_475_p2 | sel_tmp1_fu_480_p2);

assign or_cond2_fu_507_p2 = (sel_tmp6_fu_470_p2 | sel_tmp4_fu_465_p2);

assign or_cond3_fu_513_p2 = (sel_tmp_fu_455_p2 | sel_tmp2_fu_460_p2);

assign or_cond4_fu_519_p2 = (or_cond_fu_495_p2 | or_cond1_fu_501_p2);

assign or_cond5_fu_525_p2 = (or_cond3_fu_513_p2 | or_cond2_fu_507_p2);

assign or_cond6_fu_531_p2 = (or_cond5_fu_525_p2 | or_cond4_fu_519_p2);

assign or_cond_fu_495_p2 = (sel_tmp5_fu_490_p2 | sel_tmp3_fu_485_p2);

assign sel_tmp1_fu_480_p2 = ((gamma_read_reg_750 == 8'd3) ? 1'b1 : 1'b0);

assign sel_tmp2_fu_460_p2 = ((gamma_read_reg_750 == 8'd7) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_485_p2 = ((gamma_read_reg_750 == 8'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_465_p2 = ((gamma_read_reg_750 == 8'd6) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_490_p2 = ((gamma_read_reg_750 == 8'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_470_p2 = ((gamma_read_reg_750 == 8'd5) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_475_p2 = ((gamma_read_reg_750 == 8'd4) ? 1'b1 : 1'b0);

assign sel_tmp_fu_455_p2 = ((gamma_read_reg_750 == 8'd8) ? 1'b1 : 1'b0);

assign t_V_1_cast_i_i_fu_552_p1 = t_V_2_reg_444;

assign t_V_cast_i_i_fu_537_p1 = t_V_reg_433;

assign tmp_26_1_i_i_fu_578_p1 = tmp_10_reg_852;

assign tmp_26_2_i_i_fu_589_p1 = tmp_11_reg_858;

assign tmp_26_i_i_fu_567_p1 = tmp_9_reg_846;

endmodule //Loop_loop_height_pro
