-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CvtColor_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_src_rows_V_empty_n : IN STD_LOGIC;
    p_src_rows_V_read : OUT STD_LOGIC;
    p_src_cols_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_src_cols_V_empty_n : IN STD_LOGIC;
    p_src_cols_V_read : OUT STD_LOGIC;
    p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_0_V_read : OUT STD_LOGIC;
    p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_1_V_read : OUT STD_LOGIC;
    p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_2_V_read : OUT STD_LOGIC;
    p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_0_V_write : OUT STD_LOGIC;
    p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_1_V_write : OUT STD_LOGIC;
    p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of CvtColor_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv24_4444 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100010001000100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sector_data_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sector_data_0_ce0 : STD_LOGIC;
    signal sector_data_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal sector_data_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sector_data_1_ce0 : STD_LOGIC;
    signal sector_data_1_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal sector_data_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sector_data_2_ce0 : STD_LOGIC;
    signal sector_data_2_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_src_rows_V_blk_n : STD_LOGIC;
    signal p_src_cols_V_blk_n : STD_LOGIC;
    signal p_src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_data_stream_1_V_blk_n : STD_LOGIC;
    signal p_src_data_stream_2_V_blk_n : STD_LOGIC;
    signal p_dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter9_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal p_dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal j_i_reg_226 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src_cols_V_read_reg_764 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_src_rows_V_read_reg_769 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_246_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_778 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_53_i_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_53_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_26_reg_792 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_26_reg_792 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_797 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_27_reg_797 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_27_reg_797 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_804 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_28_reg_804 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_275_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_816 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_pp0_iter2_tmp_10_reg_816 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_i_fu_752_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_i_reg_821 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_3_fu_758_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_3_reg_827 : STD_LOGIC_VECTOR (23 downto 0);
    signal tab_0_V_fu_346_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tab_0_V_reg_833 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter4_tab_0_V_reg_833 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter5_tab_0_V_reg_833 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter6_tab_0_V_reg_833 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter7_tab_0_V_reg_833 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter8_tab_0_V_reg_833 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_s_fu_356_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_843 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter5_tmp_s_reg_843 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_V_fu_377_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal f_V_reg_850 : STD_LOGIC_VECTOR (24 downto 0);
    signal tab_1_V_fu_390_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tab_1_V_reg_855 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter5_tab_1_V_reg_855 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter6_tab_1_V_reg_855 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter7_tab_1_V_reg_855 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_reg_pp0_iter8_tab_1_V_reg_855 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_fu_402_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_863 : STD_LOGIC_VECTOR (28 downto 0);
    signal h_i_1_fu_434_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_i_1_reg_878 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_418_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_4_i_reg_883 : STD_LOGIC_VECTOR (46 downto 0);
    signal tab_2_V_reg_904 : STD_LOGIC_VECTOR (27 downto 0);
    signal tab_3_V_reg_911 : STD_LOGIC_VECTOR (27 downto 0);
    signal sector_data_0_load_reg_918 : STD_LOGIC_VECTOR (1 downto 0);
    signal sector_data_1_load_reg_923 : STD_LOGIC_VECTOR (1 downto 0);
    signal sector_data_2_load_reg_928 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_20_fu_570_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_fu_657_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_reg_938 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_fu_744_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal i_i_reg_215 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_79_i_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_cast_i_cast_fu_237_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_cast_i_cast_fu_252_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_fu_279_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_62_i_fu_303_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_i_fu_300_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_i_fu_306_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_65_i_fu_312_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_cast_i_fu_297_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_66_i_fu_326_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_66_cast_i_fu_333_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_2_i_fu_337_p2 : STD_LOGIC_VECTOR (26 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of p_Val2_2_i_fu_337_p2 : signal is "no";
    signal p_Val2_1_i_fu_320_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_2_cast_i_fu_342_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_55_i_fu_365_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_10_cast1_i_cast_fu_353_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_55_cast_i_cast_fu_373_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_67_i_fu_383_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_68_i_fu_395_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_69_i_fu_398_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal f_V_cast_fu_408_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_418_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_58_i_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_i_fu_429_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_71_i_fu_447_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_5_fu_454_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_76_i_fu_469_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_6_fu_476_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_7_fu_491_p6 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_11_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_500_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_9_fu_530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_i_i_i_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lD_fu_556_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_fu_578_p6 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_15_fu_597_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_587_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i109_i_fu_605_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_13_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_i_i113_i_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lD_1_fu_643_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_6_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_665_p6 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_19_fu_684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_17_fu_674_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i122_i_fu_692_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_18_fu_704_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_710_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_696_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_i_i126_i_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_2_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lD_2_fu_730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_7_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_752_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_i_fu_752_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_3_fu_758_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_758_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_418_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_418_p10 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_i_fu_752_p00 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_i_fu_752_p10 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_3_fu_758_p10 : STD_LOGIC_VECTOR (23 downto 0);

    component hls_saturation_enpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component hls_saturation_enqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        din3 : IN STD_LOGIC_VECTOR (27 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component hls_saturation_enrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component hls_saturation_ensc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CvtColor_1_sectormb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component CvtColor_1_sectorncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component CvtColor_1_sectorocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    sector_data_0_U : component CvtColor_1_sectormb6
    generic map (
        DataWidth => 2,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sector_data_0_address0,
        ce0 => sector_data_0_ce0,
        q0 => sector_data_0_q0);

    sector_data_1_U : component CvtColor_1_sectorncg
    generic map (
        DataWidth => 2,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sector_data_1_address0,
        ce0 => sector_data_1_ce0,
        q0 => sector_data_1_q0);

    sector_data_2_U : component CvtColor_1_sectorocq
    generic map (
        DataWidth => 2,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sector_data_2_address0,
        ce0 => sector_data_2_ce0,
        q0 => sector_data_2_q0);

    hls_saturation_enpcA_U60 : component hls_saturation_enpcA
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 29,
        din1_WIDTH => 28,
        dout_WIDTH => 47)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_reg_863,
        din1 => grp_fu_418_p1,
        ce => grp_fu_418_ce,
        dout => grp_fu_418_p2);

    hls_saturation_enqcK_U61 : component hls_saturation_enqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 2,
        dout_WIDTH => 28)
    port map (
        din0 => ap_reg_pp0_iter8_tab_0_V_reg_833,
        din1 => ap_reg_pp0_iter8_tab_1_V_reg_855,
        din2 => tab_2_V_reg_904,
        din3 => tab_3_V_reg_911,
        din4 => sector_data_0_load_reg_918,
        dout => p_Val2_7_fu_491_p6);

    hls_saturation_enqcK_U62 : component hls_saturation_enqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 2,
        dout_WIDTH => 28)
    port map (
        din0 => ap_reg_pp0_iter8_tab_0_V_reg_833,
        din1 => ap_reg_pp0_iter8_tab_1_V_reg_855,
        din2 => tab_2_V_reg_904,
        din3 => tab_3_V_reg_911,
        din4 => sector_data_1_load_reg_923,
        dout => p_Val2_11_fu_578_p6);

    hls_saturation_enqcK_U63 : component hls_saturation_enqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 2,
        dout_WIDTH => 28)
    port map (
        din0 => ap_reg_pp0_iter8_tab_0_V_reg_833,
        din1 => ap_reg_pp0_iter8_tab_1_V_reg_855,
        din2 => tab_2_V_reg_904,
        din3 => tab_3_V_reg_911,
        din4 => sector_data_2_load_reg_928,
        dout => p_Val2_s_fu_665_p6);

    hls_saturation_enrcU_U64 : component hls_saturation_enrcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 8,
        dout_WIDTH => 27)
    port map (
        din0 => p_Val2_i_fu_752_p0,
        din1 => p_Val2_i_fu_752_p1,
        dout => p_Val2_i_fu_752_p2);

    hls_saturation_ensc4_U65 : component hls_saturation_ensc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_3_fu_758_p0,
        din1 => r_V_3_fu_758_p1,
        dout => r_V_3_fu_758_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_241_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_241_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_241_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_i_reg_215 <= i_reg_778;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_215 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_i_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_53_i_fu_256_p2 = ap_const_lv1_1))) then 
                j_i_reg_226 <= j_fu_261_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_241_p2 = ap_const_lv1_1))) then 
                j_i_reg_226 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_tmp_53_i_reg_783 <= tmp_53_i_reg_783;
                tmp_53_i_reg_783 <= tmp_53_i_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_tmp_10_reg_816 <= tmp_10_reg_816;
                ap_reg_pp0_iter2_tmp_26_reg_792 <= tmp_26_reg_792;
                ap_reg_pp0_iter2_tmp_27_reg_797 <= tmp_27_reg_797;
                ap_reg_pp0_iter2_tmp_28_reg_804 <= tmp_28_reg_804;
                ap_reg_pp0_iter2_tmp_53_i_reg_783 <= ap_reg_pp0_iter1_tmp_53_i_reg_783;
                ap_reg_pp0_iter2_tmp_reg_811 <= tmp_reg_811;
                ap_reg_pp0_iter3_tmp_27_reg_797 <= ap_reg_pp0_iter2_tmp_27_reg_797;
                ap_reg_pp0_iter3_tmp_53_i_reg_783 <= ap_reg_pp0_iter2_tmp_53_i_reg_783;
                ap_reg_pp0_iter4_tab_0_V_reg_833 <= tab_0_V_reg_833;
                ap_reg_pp0_iter4_tmp_53_i_reg_783 <= ap_reg_pp0_iter3_tmp_53_i_reg_783;
                ap_reg_pp0_iter5_tab_0_V_reg_833 <= ap_reg_pp0_iter4_tab_0_V_reg_833;
                ap_reg_pp0_iter5_tab_1_V_reg_855 <= tab_1_V_reg_855;
                ap_reg_pp0_iter5_tmp_53_i_reg_783 <= ap_reg_pp0_iter4_tmp_53_i_reg_783;
                ap_reg_pp0_iter5_tmp_s_reg_843 <= tmp_s_reg_843;
                ap_reg_pp0_iter6_tab_0_V_reg_833 <= ap_reg_pp0_iter5_tab_0_V_reg_833;
                ap_reg_pp0_iter6_tab_1_V_reg_855 <= ap_reg_pp0_iter5_tab_1_V_reg_855;
                ap_reg_pp0_iter6_tmp_53_i_reg_783 <= ap_reg_pp0_iter5_tmp_53_i_reg_783;
                ap_reg_pp0_iter7_tab_0_V_reg_833 <= ap_reg_pp0_iter6_tab_0_V_reg_833;
                ap_reg_pp0_iter7_tab_1_V_reg_855 <= ap_reg_pp0_iter6_tab_1_V_reg_855;
                ap_reg_pp0_iter7_tmp_53_i_reg_783 <= ap_reg_pp0_iter6_tmp_53_i_reg_783;
                ap_reg_pp0_iter8_tab_0_V_reg_833 <= ap_reg_pp0_iter7_tab_0_V_reg_833;
                ap_reg_pp0_iter8_tab_1_V_reg_855 <= ap_reg_pp0_iter7_tab_1_V_reg_855;
                ap_reg_pp0_iter8_tmp_53_i_reg_783 <= ap_reg_pp0_iter7_tmp_53_i_reg_783;
                ap_reg_pp0_iter9_tmp_53_i_reg_783 <= ap_reg_pp0_iter8_tmp_53_i_reg_783;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter3_tmp_53_i_reg_783 = ap_const_lv1_1))) then
                f_V_reg_850 <= f_V_fu_377_p2;
                r_V_reg_863 <= r_V_fu_402_p2;
                tab_1_V_reg_855 <= tab_1_V_fu_390_p2;
                tmp_s_reg_843 <= r_V_3_reg_827(23 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter5_tmp_53_i_reg_783 = ap_const_lv1_1))) then
                h_i_1_reg_878 <= h_i_1_fu_434_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_778 <= i_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter8_tmp_53_i_reg_783 = ap_const_lv1_1))) then
                p_Val2_20_reg_933 <= p_Val2_20_fu_570_p3;
                p_Val2_21_reg_938 <= p_Val2_21_fu_657_p3;
                p_Val2_22_reg_943 <= p_Val2_22_fu_744_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter6_tmp_53_i_reg_783 = ap_const_lv1_1))) then
                p_Val2_4_i_reg_883 <= grp_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_tmp_53_i_reg_783 = ap_const_lv1_1))) then
                p_Val2_i_reg_821 <= p_Val2_i_fu_752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_src_cols_V_read_reg_764 <= p_src_cols_V_dout;
                p_src_rows_V_read_reg_769 <= p_src_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter2_tmp_53_i_reg_783 = ap_const_lv1_1))) then
                r_V_3_reg_827 <= r_V_3_fu_758_p2;
                tab_0_V_reg_833 <= tab_0_V_fu_346_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter7_tmp_53_i_reg_783 = ap_const_lv1_1))) then
                sector_data_0_load_reg_918 <= sector_data_0_q0;
                sector_data_1_load_reg_923 <= sector_data_1_q0;
                sector_data_2_load_reg_928 <= sector_data_2_q0;
                tab_2_V_reg_904 <= p_Val2_5_fu_454_p2(46 downto 19);
                tab_3_V_reg_911 <= p_Val2_6_fu_476_p2(46 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_53_i_reg_783 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_reg_816 <= tmp_10_fu_275_p1;
                tmp_26_reg_792 <= p_src_data_stream_0_V_dout;
                tmp_27_reg_797 <= p_src_data_stream_1_V_dout;
                tmp_28_reg_804 <= p_src_data_stream_2_V_dout;
                tmp_reg_811 <= p_src_data_stream_1_V_dout(7 downto 7);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, tmp_i_fu_241_p2, ap_CS_fsm_state2, tmp_53_i_fu_256_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_241_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_53_i_fu_256_p2 = ap_const_lv1_0))) and not(((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_53_i_fu_256_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Range1_all_ones_6_fu_651_p2 <= (lD_1_fu_643_p3 or carry_1_fu_637_p2);
    Range1_all_ones_7_fu_738_p2 <= (lD_2_fu_730_p3 or carry_2_fu_724_p2);
    Range1_all_ones_fu_564_p2 <= (lD_fu_556_p3 or carry_fu_550_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, tmp_53_i_reg_783, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_0_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((p_dst_data_stream_2_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)) or ((p_dst_data_stream_1_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)) or ((p_dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, tmp_53_i_reg_783, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_0_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((p_dst_data_stream_2_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)) or ((p_dst_data_stream_1_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)) or ((p_dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, tmp_53_i_reg_783, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_0_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((p_dst_data_stream_2_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)) or ((p_dst_data_stream_1_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)) or ((p_dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_rows_V_empty_n, p_src_cols_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter10_assign_proc : process(p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_reg_pp0_iter9_tmp_53_i_reg_783)
    begin
                ap_block_state13_pp0_stage0_iter10 <= (((p_dst_data_stream_2_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)) or ((p_dst_data_stream_1_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)) or ((p_dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, tmp_53_i_reg_783)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_53_i_reg_783 = ap_const_lv1_1) and (p_src_data_stream_0_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_53_i_fu_256_p2)
    begin
        if ((tmp_53_i_fu_256_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_i_fu_241_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_241_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_i_fu_241_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_241_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_1_fu_637_p2 <= (tmp_16_fu_609_p3 and tmp_14_i_i113_i_fu_631_p2);
    carry_2_fu_724_p2 <= (tmp_20_fu_696_p3 and tmp_14_i_i126_i_fu_718_p2);
    carry_fu_550_p2 <= (tmp_14_i_i_i_fu_544_p2 and tmp_12_fu_522_p3);
        f_V_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(f_V_reg_850),28));

    f_V_fu_377_p2 <= std_logic_vector(unsigned(r_V_10_cast1_i_cast_fu_353_p1) - unsigned(tmp_55_cast_i_cast_fu_373_p1));

    grp_fu_418_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_418_ce <= ap_const_logic_1;
        else 
            grp_fu_418_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_418_p1 <= grp_fu_418_p10(28 - 1 downto 0);
    grp_fu_418_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_V_cast_fu_408_p1),47));
    h_i_1_fu_434_p3 <= 
        h_i_fu_429_p2 when (tmp_58_i_fu_424_p2(0) = '1') else 
        ap_reg_pp0_iter5_tmp_s_reg_843;
    h_i_fu_429_p2 <= std_logic_vector(signed(ap_const_lv5_1A) + signed(ap_reg_pp0_iter5_tmp_s_reg_843));
    i_cast_i_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_215),16));
    i_fu_246_p2 <= std_logic_vector(unsigned(i_i_reg_215) + unsigned(ap_const_lv11_1));
    j_cast_i_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_226),16));
    j_fu_261_p2 <= std_logic_vector(unsigned(j_i_reg_226) + unsigned(ap_const_lv11_1));
    lD_1_fu_643_p3 <= p_Val2_11_fu_578_p6(27 downto 27);
    lD_2_fu_730_p3 <= p_Val2_s_fu_665_p6(27 downto 27);
    lD_fu_556_p3 <= p_Val2_7_fu_491_p6(27 downto 27);
    p_Val2_12_fu_587_p4 <= p_Val2_11_fu_578_p6(26 downto 19);
    p_Val2_13_fu_617_p2 <= std_logic_vector(unsigned(p_Val2_12_fu_587_p4) + unsigned(tmp_i_i109_i_fu_605_p1));
    p_Val2_17_fu_674_p4 <= p_Val2_s_fu_665_p6(26 downto 19);
    p_Val2_18_fu_704_p2 <= std_logic_vector(unsigned(p_Val2_17_fu_674_p4) + unsigned(tmp_i_i122_i_fu_692_p1));
    p_Val2_1_i_fu_320_p2 <= std_logic_vector(unsigned(tmp_65_i_fu_312_p3) - unsigned(p_Val2_cast_i_fu_297_p1));
    p_Val2_20_fu_570_p3 <= 
        ap_const_lv8_FF when (Range1_all_ones_fu_564_p2(0) = '1') else 
        p_Val2_9_fu_530_p2;
    p_Val2_21_fu_657_p3 <= 
        ap_const_lv8_FF when (Range1_all_ones_6_fu_651_p2(0) = '1') else 
        p_Val2_13_fu_617_p2;
    p_Val2_22_fu_744_p3 <= 
        ap_const_lv8_FF when (Range1_all_ones_7_fu_738_p2(0) = '1') else 
        p_Val2_18_fu_704_p2;
    p_Val2_2_cast_i_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_i_fu_337_p2),28));
    p_Val2_2_i_fu_337_p2 <= std_logic_vector(unsigned(p_Val2_i_reg_821) + unsigned(tmp_66_cast_i_fu_333_p1));
    p_Val2_5_fu_454_p2 <= std_logic_vector(unsigned(tmp_71_i_fu_447_p3) - unsigned(p_Val2_4_i_reg_883));
    p_Val2_6_fu_476_p2 <= std_logic_vector(unsigned(tmp_76_i_fu_469_p3) + unsigned(p_Val2_4_i_reg_883));
    p_Val2_8_fu_500_p4 <= p_Val2_7_fu_491_p6(26 downto 19);
    p_Val2_9_fu_530_p2 <= std_logic_vector(unsigned(p_Val2_8_fu_500_p4) + unsigned(tmp_i_i_i_fu_518_p1));
    p_Val2_cast_i_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_i_reg_821),28));
    p_Val2_i_fu_752_p0 <= p_Val2_i_fu_752_p00(19 - 1 downto 0);
    p_Val2_i_fu_752_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_279_p4),27));
    p_Val2_i_fu_752_p1 <= p_Val2_i_fu_752_p10(8 - 1 downto 0);
    p_Val2_i_fu_752_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_reg_797),27));

    p_dst_data_stream_0_V_blk_n_assign_proc : process(p_dst_data_stream_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1))) then 
            p_dst_data_stream_0_V_blk_n <= p_dst_data_stream_0_V_full_n;
        else 
            p_dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_0_V_din <= p_Val2_20_reg_933;

    p_dst_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1))) then 
            p_dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_data_stream_1_V_blk_n_assign_proc : process(p_dst_data_stream_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1))) then 
            p_dst_data_stream_1_V_blk_n <= p_dst_data_stream_1_V_full_n;
        else 
            p_dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_1_V_din <= p_Val2_21_reg_938;

    p_dst_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1))) then 
            p_dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_data_stream_2_V_blk_n_assign_proc : process(p_dst_data_stream_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1))) then 
            p_dst_data_stream_2_V_blk_n <= p_dst_data_stream_2_V_full_n;
        else 
            p_dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_2_V_din <= p_Val2_22_reg_943;

    p_dst_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_53_i_reg_783, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter9_tmp_53_i_reg_783 = ap_const_lv1_1))) then 
            p_dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_V_blk_n <= p_src_cols_V_empty_n;
        else 
            p_src_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_V_read <= ap_const_logic_1;
        else 
            p_src_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_0_V_blk_n_assign_proc : process(p_src_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_53_i_reg_783)
    begin
        if (((tmp_53_i_reg_783 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_0_V_blk_n <= p_src_data_stream_0_V_empty_n;
        else 
            p_src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_53_i_reg_783, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_53_i_reg_783 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_1_V_blk_n_assign_proc : process(p_src_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_53_i_reg_783)
    begin
        if (((tmp_53_i_reg_783 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_1_V_blk_n <= p_src_data_stream_1_V_empty_n;
        else 
            p_src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_53_i_reg_783, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_53_i_reg_783 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_2_V_blk_n_assign_proc : process(p_src_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_53_i_reg_783)
    begin
        if (((tmp_53_i_reg_783 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_2_V_blk_n <= p_src_data_stream_2_V_empty_n;
        else 
            p_src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_53_i_reg_783, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_53_i_reg_783 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_V_blk_n <= p_src_rows_V_empty_n;
        else 
            p_src_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_V_read <= ap_const_logic_1;
        else 
            p_src_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    r_V_10_cast1_i_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_reg_827),25));
    r_V_3_fu_758_p0 <= ap_const_lv24_4444(16 - 1 downto 0);
    r_V_3_fu_758_p1 <= r_V_3_fu_758_p10(8 - 1 downto 0);
    r_V_3_fu_758_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_tmp_26_reg_792),24));
    r_V_4_fu_279_p4 <= ((tmp_28_reg_804 & tmp_28_reg_804) & ap_const_lv3_0);
    r_V_fu_402_p2 <= std_logic_vector(unsigned(tmp_68_i_fu_395_p1) - unsigned(tmp_69_i_fu_398_p1));
    sector_data_0_address0 <= tmp_79_i_fu_441_p1(3 - 1 downto 0);

    sector_data_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sector_data_0_ce0 <= ap_const_logic_1;
        else 
            sector_data_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sector_data_1_address0 <= tmp_79_i_fu_441_p1(3 - 1 downto 0);

    sector_data_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sector_data_1_ce0 <= ap_const_logic_1;
        else 
            sector_data_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sector_data_2_address0 <= tmp_79_i_fu_441_p1(3 - 1 downto 0);

    sector_data_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sector_data_2_ce0 <= ap_const_logic_1;
        else 
            sector_data_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tab_0_V_fu_346_p3 <= 
        p_Val2_1_i_fu_320_p2 when (ap_reg_pp0_iter2_tmp_reg_811(0) = '1') else 
        p_Val2_2_cast_i_fu_342_p1;
    tab_1_V_fu_390_p2 <= std_logic_vector(unsigned(tmp_67_i_fu_383_p3) - unsigned(tab_0_V_reg_833));
    tmp_10_fu_275_p1 <= p_src_data_stream_1_V_dout(7 - 1 downto 0);
    tmp_11_fu_510_p3 <= p_Val2_7_fu_491_p6(18 downto 18);
    tmp_12_fu_522_p3 <= p_Val2_7_fu_491_p6(26 downto 26);
    tmp_13_fu_536_p3 <= p_Val2_9_fu_530_p2(7 downto 7);
    tmp_14_i_i113_i_fu_631_p2 <= (tmp_17_fu_623_p3 xor ap_const_lv1_1);
    tmp_14_i_i126_i_fu_718_p2 <= (tmp_21_fu_710_p3 xor ap_const_lv1_1);
    tmp_14_i_i_i_fu_544_p2 <= (tmp_13_fu_536_p3 xor ap_const_lv1_1);
    tmp_15_fu_597_p3 <= p_Val2_11_fu_578_p6(18 downto 18);
    tmp_16_fu_609_p3 <= p_Val2_11_fu_578_p6(26 downto 26);
    tmp_17_fu_623_p3 <= p_Val2_13_fu_617_p2(7 downto 7);
    tmp_19_fu_684_p3 <= p_Val2_s_fu_665_p6(18 downto 18);
    tmp_20_fu_696_p3 <= p_Val2_s_fu_665_p6(26 downto 26);
    tmp_21_fu_710_p3 <= p_Val2_18_fu_704_p2(7 downto 7);
    tmp_53_i_fu_256_p2 <= "1" when (unsigned(j_cast_i_cast_fu_252_p1) < unsigned(p_src_cols_V_read_reg_764)) else "0";
    tmp_55_cast_i_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_i_fu_365_p3),25));
    tmp_55_i_fu_365_p3 <= (tmp_s_fu_356_p4 & ap_const_lv19_0);
    tmp_58_i_fu_424_p2 <= "1" when (unsigned(ap_reg_pp0_iter5_tmp_s_reg_843) > unsigned(ap_const_lv5_5)) else "0";
    tmp_61_i_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_tmp_28_reg_804),9));
    tmp_62_i_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_tmp_27_reg_797),9));
    tmp_63_i_fu_306_p2 <= std_logic_vector(unsigned(tmp_62_i_fu_303_p1) + unsigned(tmp_61_i_fu_300_p1));
    tmp_65_i_fu_312_p3 <= (tmp_63_i_fu_306_p2 & ap_const_lv19_0);
    tmp_66_cast_i_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_i_fu_326_p3),27));
    tmp_66_i_fu_326_p3 <= (ap_reg_pp0_iter2_tmp_10_reg_816 & ap_const_lv19_0);
    tmp_67_i_fu_383_p3 <= (ap_reg_pp0_iter3_tmp_27_reg_797 & ap_const_lv20_0);
    tmp_68_i_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tab_0_V_reg_833),29));
    tmp_69_i_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tab_1_V_fu_390_p2),29));
    tmp_71_i_fu_447_p3 <= (ap_reg_pp0_iter7_tab_0_V_reg_833 & ap_const_lv19_0);
    tmp_76_i_fu_469_p3 <= (ap_reg_pp0_iter7_tab_1_V_reg_855 & ap_const_lv19_0);
    tmp_79_i_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_i_1_reg_878),64));
    tmp_i_fu_241_p2 <= "1" when (unsigned(i_cast_i_cast_fu_237_p1) < unsigned(p_src_rows_V_read_reg_769)) else "0";
    tmp_i_i109_i_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_597_p3),8));
    tmp_i_i122_i_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_684_p3),8));
    tmp_i_i_i_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_510_p3),8));
    tmp_s_fu_356_p4 <= r_V_3_reg_827(23 downto 19);
end behav;
