// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_loop_height_pro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_rows_assign_cast_loc_dout,
        p_rows_assign_cast_loc_empty_n,
        p_rows_assign_cast_loc_read,
        p_cols_assign_cast_loc_dout,
        p_cols_assign_cast_loc_empty_n,
        p_cols_assign_cast_loc_read,
        img2_data_stream_0_V_din,
        img2_data_stream_0_V_full_n,
        img2_data_stream_0_V_write,
        img2_data_stream_1_V_din,
        img2_data_stream_1_V_full_n,
        img2_data_stream_1_V_write,
        img2_data_stream_2_V_din,
        img2_data_stream_2_V_full_n,
        img2_data_stream_2_V_write,
        img1_data_stream_0_V_dout,
        img1_data_stream_0_V_empty_n,
        img1_data_stream_0_V_read,
        img1_data_stream_1_V_dout,
        img1_data_stream_1_V_empty_n,
        img1_data_stream_1_V_read,
        img1_data_stream_2_V_dout,
        img1_data_stream_2_V_empty_n,
        img1_data_stream_2_V_read,
        sat_dout,
        sat_empty_n,
        sat_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] p_rows_assign_cast_loc_dout;
input   p_rows_assign_cast_loc_empty_n;
output   p_rows_assign_cast_loc_read;
input  [11:0] p_cols_assign_cast_loc_dout;
input   p_cols_assign_cast_loc_empty_n;
output   p_cols_assign_cast_loc_read;
output  [7:0] img2_data_stream_0_V_din;
input   img2_data_stream_0_V_full_n;
output   img2_data_stream_0_V_write;
output  [7:0] img2_data_stream_1_V_din;
input   img2_data_stream_1_V_full_n;
output   img2_data_stream_1_V_write;
output  [7:0] img2_data_stream_2_V_din;
input   img2_data_stream_2_V_full_n;
output   img2_data_stream_2_V_write;
input  [7:0] img1_data_stream_0_V_dout;
input   img1_data_stream_0_V_empty_n;
output   img1_data_stream_0_V_read;
input  [7:0] img1_data_stream_1_V_dout;
input   img1_data_stream_1_V_empty_n;
output   img1_data_stream_1_V_read;
input  [7:0] img1_data_stream_2_V_dout;
input   img1_data_stream_2_V_empty_n;
output   img1_data_stream_2_V_read;
input  [7:0] sat_dout;
input   sat_empty_n;
output   sat_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_rows_assign_cast_loc_read;
reg p_cols_assign_cast_loc_read;
reg img2_data_stream_0_V_write;
reg img2_data_stream_1_V_write;
reg img2_data_stream_2_V_write;
reg img1_data_stream_0_V_read;
reg img1_data_stream_1_V_read;
reg img1_data_stream_2_V_read;
reg sat_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] lut_s_1_2_address0;
reg    lut_s_1_2_ce0;
wire   [7:0] lut_s_1_2_q0;
wire   [7:0] lut_s_n0_2_address0;
reg    lut_s_n0_2_ce0;
wire   [7:0] lut_s_n0_2_q0;
wire   [7:0] lut_s_0_2_address0;
reg    lut_s_0_2_ce0;
wire   [7:0] lut_s_0_2_q0;
wire   [7:0] lut_s_0_4_address0;
reg    lut_s_0_4_ce0;
wire   [7:0] lut_s_0_4_q0;
wire   [7:0] lut_s_0_6_address0;
reg    lut_s_0_6_ce0;
wire   [7:0] lut_s_0_6_q0;
wire   [7:0] lut_s_0_8_address0;
reg    lut_s_0_8_ce0;
wire   [7:0] lut_s_0_8_q0;
wire   [7:0] lut_s_1_0_address0;
reg    lut_s_1_0_ce0;
wire   [7:0] lut_s_1_0_q0;
reg    p_rows_assign_cast_loc_blk_n;
reg    p_cols_assign_cast_loc_blk_n;
reg    img2_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_i_reg_478;
reg   [0:0] ap_reg_pp0_iter3_exitcond_i_i_i_reg_478;
reg    img2_data_stream_1_V_blk_n;
reg    img2_data_stream_2_V_blk_n;
reg    img1_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    img1_data_stream_1_V_blk_n;
reg    img1_data_stream_2_V_blk_n;
reg    sat_blk_n;
reg   [10:0] t_V_2_reg_252;
reg   [11:0] p_rows_assign_cast_lo_reg_406;
reg    ap_block_state1;
reg   [11:0] p_cols_assign_cast_lo_reg_411;
wire   [0:0] sel_tmp_fu_263_p2;
reg   [0:0] sel_tmp_reg_416;
wire   [0:0] sel_tmp2_fu_269_p2;
reg   [0:0] sel_tmp2_reg_421;
wire   [0:0] sel_tmp4_fu_275_p2;
reg   [0:0] sel_tmp4_reg_426;
wire   [0:0] sel_tmp6_fu_281_p2;
reg   [0:0] sel_tmp6_reg_432;
wire   [0:0] sel_tmp8_fu_287_p2;
reg   [0:0] sel_tmp8_reg_437;
wire   [0:0] sel_tmp1_fu_293_p2;
reg   [0:0] sel_tmp1_reg_443;
wire   [0:0] sel_tmp3_fu_299_p2;
reg   [0:0] sel_tmp3_reg_448;
wire   [0:0] or_cond_fu_305_p2;
reg   [0:0] or_cond_reg_454;
wire    ap_CS_fsm_state2;
wire   [0:0] or_cond2_fu_313_p2;
reg   [0:0] or_cond2_reg_459;
wire   [0:0] or_cond3_fu_317_p2;
reg   [0:0] or_cond3_reg_464;
wire   [0:0] exitcond51_i_i_i_fu_327_p2;
wire    ap_CS_fsm_state3;
wire   [10:0] i_V_fu_332_p2;
reg   [10:0] i_V_reg_473;
wire   [0:0] exitcond_i_i_i_fu_342_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state8_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_i_reg_478;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_i_i_reg_478;
wire   [10:0] j_V_fu_347_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_reg_487;
reg   [7:0] ap_reg_pp0_iter2_tmp_reg_487;
reg   [7:0] ap_reg_pp0_iter3_tmp_reg_487;
reg   [7:0] tmp_7_reg_492;
reg   [7:0] ap_reg_pp0_iter2_tmp_7_reg_492;
reg   [7:0] ap_reg_pp0_iter3_tmp_7_reg_492;
reg   [7:0] tmp_9_reg_497;
reg   [7:0] ap_reg_pp0_iter2_tmp_9_reg_497;
reg   [7:0] d_val_2_2_reg_538;
reg   [7:0] d_val_2_3_reg_543;
reg   [7:0] d_val_2_6_reg_548;
reg   [7:0] d_val_2_7_reg_553;
wire   [7:0] newSel1_fu_363_p3;
reg   [7:0] newSel1_reg_558;
wire   [7:0] newSel3_fu_370_p3;
reg   [7:0] newSel3_reg_563;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [10:0] t_V_reg_241;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_5_i_i_fu_353_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] or_cond1_fu_309_p2;
wire   [11:0] t_V_cast_i_i_fu_323_p1;
wire   [11:0] t_V_1_cast_i_i_fu_338_p1;
wire   [7:0] newSel_fu_376_p3;
wire   [7:0] newSel2_fu_381_p3;
wire   [7:0] newSel4_fu_386_p3;
wire   [7:0] newSel5_fu_392_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Loop_loop_height_fYi #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_s_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_s_1_2_address0),
    .ce0(lut_s_1_2_ce0),
    .q0(lut_s_1_2_q0)
);

Loop_loop_height_g8j #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_s_n0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_s_n0_2_address0),
    .ce0(lut_s_n0_2_ce0),
    .q0(lut_s_n0_2_q0)
);

Loop_loop_height_hbi #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_s_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_s_0_2_address0),
    .ce0(lut_s_0_2_ce0),
    .q0(lut_s_0_2_q0)
);

Loop_loop_height_ibs #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_s_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_s_0_4_address0),
    .ce0(lut_s_0_4_ce0),
    .q0(lut_s_0_4_q0)
);

Loop_loop_height_jbC #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_s_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_s_0_6_address0),
    .ce0(lut_s_0_6_ce0),
    .q0(lut_s_0_6_q0)
);

Loop_loop_height_kbM #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_s_0_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_s_0_8_address0),
    .ce0(lut_s_0_8_ce0),
    .q0(lut_s_0_8_q0)
);

Loop_loop_height_lbW #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_s_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_s_1_0_address0),
    .ce0(lut_s_1_0_ce0),
    .q0(lut_s_1_0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond51_i_i_i_fu_327_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond51_i_i_i_fu_327_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond51_i_i_i_fu_327_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_fu_342_p2 == 1'd0))) begin
        t_V_2_reg_252 <= j_V_fu_347_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond51_i_i_i_fu_327_p2 == 1'd0))) begin
        t_V_2_reg_252 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_241 <= i_V_reg_473;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_reg_241 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_i_i_i_reg_478 <= exitcond_i_i_i_reg_478;
        exitcond_i_i_i_reg_478 <= exitcond_i_i_i_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_i_i_i_reg_478 <= ap_reg_pp0_iter1_exitcond_i_i_i_reg_478;
        ap_reg_pp0_iter2_tmp_7_reg_492 <= tmp_7_reg_492;
        ap_reg_pp0_iter2_tmp_9_reg_497 <= tmp_9_reg_497;
        ap_reg_pp0_iter2_tmp_reg_487 <= tmp_reg_487;
        ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 <= ap_reg_pp0_iter2_exitcond_i_i_i_reg_478;
        ap_reg_pp0_iter3_tmp_7_reg_492 <= ap_reg_pp0_iter2_tmp_7_reg_492;
        ap_reg_pp0_iter3_tmp_reg_487 <= ap_reg_pp0_iter2_tmp_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond3_reg_464 == 1'd1) & (or_cond_reg_454 == 1'd1) & (sel_tmp3_reg_448 == 1'd1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_478 == 1'd0))) begin
        d_val_2_2_reg_538 <= lut_s_n0_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond3_reg_464 == 1'd1) & (or_cond_reg_454 == 1'd1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_478 == 1'd0) & (sel_tmp3_reg_448 == 1'd0))) begin
        d_val_2_3_reg_543 <= lut_s_0_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond2_reg_459 == 1'd1) & (sel_tmp4_reg_426 == 1'd1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_478 == 1'd0) & (or_cond3_reg_464 == 1'd0))) begin
        d_val_2_6_reg_548 <= lut_s_0_8_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond2_reg_459 == 1'd1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_478 == 1'd0) & (or_cond3_reg_464 == 1'd0) & (sel_tmp4_reg_426 == 1'd0))) begin
        d_val_2_7_reg_553 <= lut_s_1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_V_reg_473 <= i_V_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond3_reg_464 == 1'd1) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_478 == 1'd0) & (or_cond_reg_454 == 1'd0))) begin
        newSel1_reg_558 <= newSel1_fu_363_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_exitcond_i_i_i_reg_478 == 1'd0) & (or_cond3_reg_464 == 1'd0) & (or_cond2_reg_459 == 1'd0))) begin
        newSel3_reg_563 <= newSel3_fu_370_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        or_cond2_reg_459 <= or_cond2_fu_313_p2;
        or_cond3_reg_464 <= or_cond3_fu_317_p2;
        or_cond_reg_454 <= or_cond_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((sat_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cols_assign_cast_lo_reg_411 <= p_cols_assign_cast_loc_dout;
        p_rows_assign_cast_lo_reg_406 <= p_rows_assign_cast_loc_dout;
        sel_tmp1_reg_443 <= sel_tmp1_fu_293_p2;
        sel_tmp2_reg_421 <= sel_tmp2_fu_269_p2;
        sel_tmp3_reg_448 <= sel_tmp3_fu_299_p2;
        sel_tmp4_reg_426 <= sel_tmp4_fu_275_p2;
        sel_tmp6_reg_432 <= sel_tmp6_fu_281_p2;
        sel_tmp8_reg_437 <= sel_tmp8_fu_287_p2;
        sel_tmp_reg_416 <= sel_tmp_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_478 == 1'd0))) begin
        tmp_7_reg_492 <= img1_data_stream_1_V_dout;
        tmp_9_reg_497 <= img1_data_stream_2_V_dout;
        tmp_reg_487 <= img1_data_stream_0_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_i_i_i_fu_342_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond51_i_i_i_fu_327_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond51_i_i_i_fu_327_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img1_data_stream_0_V_blk_n = img1_data_stream_0_V_empty_n;
    end else begin
        img1_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_478 == 1'd0))) begin
        img1_data_stream_0_V_read = 1'b1;
    end else begin
        img1_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img1_data_stream_1_V_blk_n = img1_data_stream_1_V_empty_n;
    end else begin
        img1_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_478 == 1'd0))) begin
        img1_data_stream_1_V_read = 1'b1;
    end else begin
        img1_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img1_data_stream_2_V_blk_n = img1_data_stream_2_V_empty_n;
    end else begin
        img1_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_i_i_reg_478 == 1'd0))) begin
        img1_data_stream_2_V_read = 1'b1;
    end else begin
        img1_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img2_data_stream_0_V_blk_n = img2_data_stream_0_V_full_n;
    end else begin
        img2_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0))) begin
        img2_data_stream_0_V_write = 1'b1;
    end else begin
        img2_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img2_data_stream_1_V_blk_n = img2_data_stream_1_V_full_n;
    end else begin
        img2_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0))) begin
        img2_data_stream_1_V_write = 1'b1;
    end else begin
        img2_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        img2_data_stream_2_V_blk_n = img2_data_stream_2_V_full_n;
    end else begin
        img2_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0))) begin
        img2_data_stream_2_V_write = 1'b1;
    end else begin
        img2_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_s_0_2_ce0 = 1'b1;
    end else begin
        lut_s_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_s_0_4_ce0 = 1'b1;
    end else begin
        lut_s_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_s_0_6_ce0 = 1'b1;
    end else begin
        lut_s_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_s_0_8_ce0 = 1'b1;
    end else begin
        lut_s_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_s_1_0_ce0 = 1'b1;
    end else begin
        lut_s_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_s_1_2_ce0 = 1'b1;
    end else begin
        lut_s_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_s_n0_2_ce0 = 1'b1;
    end else begin
        lut_s_n0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cols_assign_cast_loc_blk_n = p_cols_assign_cast_loc_empty_n;
    end else begin
        p_cols_assign_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((sat_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cols_assign_cast_loc_read = 1'b1;
    end else begin
        p_cols_assign_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_rows_assign_cast_loc_blk_n = p_rows_assign_cast_loc_empty_n;
    end else begin
        p_rows_assign_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((sat_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_rows_assign_cast_loc_read = 1'b1;
    end else begin
        p_rows_assign_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sat_blk_n = sat_empty_n;
    end else begin
        sat_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((sat_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sat_read = 1'b1;
    end else begin
        sat_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((sat_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond51_i_i_i_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_i_i_fu_342_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_i_i_fu_342_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((img1_data_stream_2_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)) | ((img1_data_stream_1_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)) | ((img1_data_stream_0_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((img2_data_stream_2_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)) | ((img2_data_stream_1_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)) | ((img2_data_stream_0_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((img1_data_stream_2_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)) | ((img1_data_stream_1_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)) | ((img1_data_stream_0_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((img2_data_stream_2_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)) | ((img2_data_stream_1_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)) | ((img2_data_stream_0_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((img1_data_stream_2_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)) | ((img1_data_stream_1_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)) | ((img1_data_stream_0_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((img2_data_stream_2_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)) | ((img2_data_stream_1_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)) | ((img2_data_stream_0_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((sat_empty_n == 1'b0) | (p_cols_assign_cast_loc_empty_n == 1'b0) | (p_rows_assign_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((img1_data_stream_2_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)) | ((img1_data_stream_1_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)) | ((img1_data_stream_0_V_empty_n == 1'b0) & (exitcond_i_i_i_reg_478 == 1'd0)));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter4 = (((img2_data_stream_2_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)) | ((img2_data_stream_1_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)) | ((img2_data_stream_0_V_full_n == 1'b0) & (ap_reg_pp0_iter3_exitcond_i_i_i_reg_478 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond51_i_i_i_fu_327_p2 = ((t_V_cast_i_i_fu_323_p1 == p_rows_assign_cast_lo_reg_406) ? 1'b1 : 1'b0);

assign exitcond_i_i_i_fu_342_p2 = ((t_V_1_cast_i_i_fu_338_p1 == p_cols_assign_cast_lo_reg_411) ? 1'b1 : 1'b0);

assign i_V_fu_332_p2 = (t_V_reg_241 + 11'd1);

assign img2_data_stream_0_V_din = ap_reg_pp0_iter3_tmp_reg_487;

assign img2_data_stream_1_V_din = ap_reg_pp0_iter3_tmp_7_reg_492;

assign img2_data_stream_2_V_din = ((or_cond3_reg_464[0:0] === 1'b1) ? newSel4_fu_386_p3 : newSel5_fu_392_p3);

assign j_V_fu_347_p2 = (t_V_2_reg_252 + 11'd1);

assign lut_s_0_2_address0 = tmp_5_i_i_fu_353_p1;

assign lut_s_0_4_address0 = tmp_5_i_i_fu_353_p1;

assign lut_s_0_6_address0 = tmp_5_i_i_fu_353_p1;

assign lut_s_0_8_address0 = tmp_5_i_i_fu_353_p1;

assign lut_s_1_0_address0 = tmp_5_i_i_fu_353_p1;

assign lut_s_1_2_address0 = tmp_5_i_i_fu_353_p1;

assign lut_s_n0_2_address0 = tmp_5_i_i_fu_353_p1;

assign newSel1_fu_363_p3 = ((sel_tmp8_reg_437[0:0] === 1'b1) ? lut_s_0_4_q0 : lut_s_0_6_q0);

assign newSel2_fu_381_p3 = ((sel_tmp4_reg_426[0:0] === 1'b1) ? d_val_2_6_reg_548 : d_val_2_7_reg_553);

assign newSel3_fu_370_p3 = ((sel_tmp_reg_416[0:0] === 1'b1) ? lut_s_1_2_q0 : ap_reg_pp0_iter2_tmp_9_reg_497);

assign newSel4_fu_386_p3 = ((or_cond_reg_454[0:0] === 1'b1) ? newSel_fu_376_p3 : newSel1_reg_558);

assign newSel5_fu_392_p3 = ((or_cond2_reg_459[0:0] === 1'b1) ? newSel2_fu_381_p3 : newSel3_reg_563);

assign newSel_fu_376_p3 = ((sel_tmp3_reg_448[0:0] === 1'b1) ? d_val_2_2_reg_538 : d_val_2_3_reg_543);

assign or_cond1_fu_309_p2 = (sel_tmp8_reg_437 | sel_tmp6_reg_432);

assign or_cond2_fu_313_p2 = (sel_tmp4_reg_426 | sel_tmp2_reg_421);

assign or_cond3_fu_317_p2 = (or_cond_fu_305_p2 | or_cond1_fu_309_p2);

assign or_cond_fu_305_p2 = (sel_tmp3_reg_448 | sel_tmp1_reg_443);

assign sel_tmp1_fu_293_p2 = ((sat_dout == 8'd2) ? 1'b1 : 1'b0);

assign sel_tmp2_fu_269_p2 = ((sat_dout == 8'd6) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_299_p2 = ((sat_dout == 8'd1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_275_p2 = ((sat_dout == 8'd5) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_281_p2 = ((sat_dout == 8'd4) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_287_p2 = ((sat_dout == 8'd3) ? 1'b1 : 1'b0);

assign sel_tmp_fu_263_p2 = ((sat_dout == 8'd7) ? 1'b1 : 1'b0);

assign t_V_1_cast_i_i_fu_338_p1 = t_V_2_reg_252;

assign t_V_cast_i_i_fu_323_p1 = t_V_reg_241;

assign tmp_5_i_i_fu_353_p1 = tmp_9_reg_497;

endmodule //Loop_loop_height_pro
